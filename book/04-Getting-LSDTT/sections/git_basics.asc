:numbered:


=== Getting the code using Git

The development versions of LSDTopoTools live at the University of Edinburgh's code development pages, https://sourced.ecdf.ed.ac.uk/projects/geos/LSD_devel/[sourceEd], 
and if you want to be vouyeristic you can always go to the https://sourced.ecdf.ed.ac.uk/projects/geos/LSD_devel/timeline[timeline] there and see exactly what we are up to. 

If you actually want to download working versions of the code, however, your best bet is to go to one of our open-source working version hosted on https://github.com/[Github]. 
To get code on Github you will need to know about the version control system http://git-scm.com/[`git`].

What follows is an **extremely** abbreviated introduction to `git`. 
If you want to know more about it, there are thousands of pages of documentation waiting for you online. 
Here we only supply the basics. 
  
==== Getting started with Git

We start with the assumption that you have installed `git` on your computer.
If it isn't installed, you should consult the appendices for instructions on how to install it. 

You can call `git` with:

[source,console]
----
$ git
----

Note: Much of what I will descrbe below is also described in the http://git-scm.com/book/en/[Git book], available online. 

If it is your first time using `git`, you should configure it with a username and email:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com   
----    

Now, if you are the kind of person who cares what the internet thinks of you, 
you might want to set your email and username to be the same as on your https://github.com/[Github] account 
(this is easily done online) so that your contributions to open source projects wil be documented online. 

You can `config` some other stuff as well, if you feel like it, such as your editor and merge tool. 
If you don't know what those are, don't bother with these `config` options:

[source,console]
----
  smudd@burn OneD_hillslope $ git config --global merge.tool vimdiff
  smudd@burn OneD_hillslope $ git config --global core.editor emacs
----

Note: If you want a local configureation, you need to be in a repository (see below) and use the `--local` instead of `--global` flag. 

You can check all your options with::
  
  smudd@burn OneD_hillslope $ git config --list
  core.repositoryformatversion=0
  core.filemode=true
  core.bare=false
  core.logallrefupdates=true
  core.editor=emacs
  user.name=simon.m.mudd
  user.email=Mudd.Pile@pileofmudd.mudd
  merge.tool=vimdiff

==== Adding files and directories to the repository

First, you go to a directory where you have some files you want to track. 
Type:

[source,console]
----
  git init
----

to initiate a repository. If you are downloading an LSDTopoTools repository from github, you won't need to `init` a repository. 

So now you gave run `git init` in some folder to initiate a repository. 
You will now want to add files with the add command::

[source,console]
----  
    smudd@burn OneD_hillslope $ ls
    a.file a_directory
    smudd@burn OneD_hillslope $ git add a.file a_directory
 ----
 
`Git` adds all files in a folder, including all the files in a named subdirectoy. 
   
If you want to add a specific file(s), you can do something like this:       

[source,console]
----  
    smudd@burn OneD_hillslope $ git add *.hpp
----
 
Committing to the repository
============================================================  

  This works much the same as svn::
  
    mudd@burn OneD_hillslope $ git commit -m "Initial project version" .
    
  Where the . indicates you want everything in the current directory including subfolders.
  
Pushing your repository to Github
=============================================================

  `Github <https://github.com/>`_ is a resource that hosts git repositories. 
  It is a popular place to put open source code. 
  
  To host a repository on `Github <https://github.com/>`_, you will need to set up the repository before
  synching your local repository with the github repository. 
  
  You can place your repository on 
  `Github <https://github.com/>`_ by using the ``push`` command::
  
    smudd@burn OneD_hillslope $ git remote add origin https://github.com/simon-m-mudd/OneD_hillslope.git
    smudd@burn OneD_hillslope $ git push -u origin master
    Counting objects: 36, done.
    Delta compression using up to 64 threads.
    Compressing objects: 100% (33/33), done.
    Writing objects: 100% (36/36), 46.31 KiB, done.
    Total 36 (delta 8), reused 0 (delta 0)
    To https://github.com/simon-m-mudd/OneD_hillslope.git
    * [new branch]      master -> master
    Branch master set up to track remote branch master from origin.
    
  Once you have uploaded an inital copy, you will need to keep it in sync with 
  local copies. You can push things to github with::
  
    git push -u origin master
    
  but if things are out of sync (I did this by modifying a readme on the github site)
  you will get this error message::
  
    To https://github.com/simon-m-mudd/OneD_hillslope.git
    ! [rejected]        master -> master (non-fast-forward)
    error: failed to push some refs to 'https://github.com/simon-m-mudd/OneD_hillslope.git'
    hint: Updates were rejected because the tip of your current branch is behind
    hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
    hint: before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details. 
  I fixed this by running::
  
    git pull origin

  It seemed to be happy after that. 
         
Problems with Setting up repos on github
==========================================
  
 Git is not quite as intuitive as subversions, so I've found quite a number of problems in setting up github repos. Here are some examples and (hopefully) their fixes. 
 
    
Creating local repo and then Github repository
------------------------------------------------

  I made a local github repository using::
  
    git init
    
  And then tried to push to a github repo, but the first error message is you need to make a repository on github first. 
  I added a readme file on Github, but this seemed to lead to errors::
  
    Updates were rejected because the tip of your current branch is behind
    hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
    
    
  So what I did to fix this was:
  
    #. On the local repo, I used::
    
        touch README.md
	git add README.md
        git commit -m "Trying to add readme" .
    
    #. Then I pulled from the master::
    
        git pull origin master
        
        
    #. Then I pushed to the master. That seemed to fix things::
    
        git push -u origin master