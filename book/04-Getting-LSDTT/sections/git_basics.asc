:numbered:


=== Getting the code using Git

The development versions of LSDTopoTools live at the University of Edinburgh's code development pages, https://sourced.ecdf.ed.ac.uk/projects/geos/LSD_devel/[sourceEd],
and if you want to be voyeuristic you can always go to the https://sourced.ecdf.ed.ac.uk/projects/geos/LSD_devel/timeline[timeline] there and see exactly what we are up to.

If you actually want to download working versions of the code, however, your best bet is to go to one of our open-source working versions hosted on https://github.com/[Github].
To get code on Github you will need to know about the version control system http://git-scm.com/[`git`].

What follows is an **extremely** abbreviated introduction to `git`.
If you want to know more about it, there are thousands of pages of documentation waiting for you online.
Here we only supply the basics.

==== Getting started with Git

We start with the assumption that you have installed `git` on your computer.
If it isn't installed, you should consult the appendices for instructions on how to install it.

You can call `git` with:

[source,console]
----
$ git
----

NOTE: Much of what I will describe below is also described in the http://git-scm.com/book/en/[Git book], available online.

If it is your first time using `git`, you should configure it with a username and email:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Now, if you are the kind of person who cares what the internet thinks of you,
you might want to set your email and username to be the same as on your https://github.com/[Github] account
(this is easily done online) so that your contributions to open source projects will be documented online.

You can `config` some other stuff as well, if you feel like it, such as your editor and merge tool.
If you don't know what those are, don't bother with these `config` options:

[source,console]
----
$ git config --global merge.tool vimdiff
$ git config --global core.editor emacs
----

NOTE: If you want a local configuration, you need to be in a repository (see below) and use the `--local` instead of `--global` flag.

You can check all your options with::

[source,console]
----
  $ git config --list
  core.repositoryformatversion=0
  core.filemode=true
  core.bare=false
  core.logallrefupdates=true
  core.editor=emacs
  user.name=simon.m.mudd
  user.email=Mudd.Pile@pileofmudd.mudd
  merge.tool=vimdiff
----

==== Pulling a repository from Github

Okay, once you have set up git, you are ready to get some code!
To get the code, you will need to `clone` it from a repository.
Most of our code is hosted on https://github.com/[Github], and the repository https://github.com/LSDtopotools,
but for now we will run you through an example.

First, navigate to a folder where you want to keep your repositories.
You do not need to make a subfolder for the specific repository; git will do that for you.

Go to  https://github.com/[Github] and navigate to a repository you want to grab (in git parlance, you will `clone` the repository).
Here is one that you might try: https://github.com/LSDtopotools/LSDTopoTools_ChiMudd2014.

If you look at the right side of this website there will be a little box that says `HTTPS clone URL`.
Copy the contents of this box. In your powershell or terminal window type

[source,console]
----
$ git clone https://github.com/LSDtopotools/LSDTopoTools_ChiMudd2014.git
----

The repository will be cloned into the subdirectory `LSDTopoTools_ChiMudd2014`.
Congratulations, you just got the code!

===== Keeping the code up to date

Once you have the code, you might want to keep up with updates.
To do this, you just go to the directory that contains the repository whenever you start working and run

[source,console]
----
$ git pull -u origin master
----

The `origin` is the place you cloned the repository from (in this case a specific Github repository) and
`master` is the branch of the code you are working on.
Most of the time you will be using the `master` branch,
but you should read the https://git-scm.com/[git documentation] to find out
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging[how to branch your repository].

===== Keeping track of changes

Once you have an updated version of the code you can simply run it to do your own analyses.
But if you are making modification to the code, you probably will want to track these changes.
To track changes use the `git commit` command.

If you change multiple files, you can commit everything in a folder (including all subdirectories) like this:

[source,console]
----
$ git commit -m "This is a message that should state what you've just done." .
----

Or you can commit individual, or multiple files:

[source,console]
----
$ git commit -m "This is a message that should state what you've just done." a.file
$ git commit -m "This is a message that should state what you've just done." more.than one.file
----


==== Making your own repository

If you start to modify our code, or want to start keeping track of your own scripts,
you might create your own repositories using git and host them on
https://github.com/[Github], https://bitbucket.org/[Bitbucket] or some other hosting website.

First, you go to a directory where you have some files you want to track.
You will need to initiate a *git* repository here. This assumes you have *git* installed.
Type:

[source,console]
----
git init
----

to initiate a repository.
If you are downloading an LSDTopoTools repository from github, you won't need to `init` a repository.

So now you gave run `git init` in some folder to initiate a repository.
You will now want to add files with the add command:

[source,console]
----
$ ls
a.file a_directory
$ git add a.file a_directory
----

`Git` adds all files in a folder, including all the files in a named subdirectoy.

If you want to add a specific file(s), you can do something like this:

[source,console]
----
$ git add *.hpp
$ git add A_specific.file
----

===== Committing to a repository

Once you have some files in a repository,

[source,console]
----
$ git commit -m "Initial project version" .
----

Where the `.` indicates you want everything in the current directory including subfolders.

===== Pushing your repository to Github

https://github.com/[Github] is a resource that hosts git repositories.
It is a popular place to put open source code.
To host a repository on https://github.com/[Github], you will need to set up the repository before
syncing your local repository with the github repository.
Once you have initiated a repository on https://github.com/[Github], it will helpfully tell you the URL of the repository.
This URL will look something like this: https://github.com/username/A_repository.git.

To place the repository sitting on your computer on https://github.com/[Github],
you need to use the  `push` command. For example:

[source,console]
----
$ git remote add origin https://github.com/simon-m-mudd/OneD_hillslope.git
$ git push -u origin master
  Counting objects: 36, done.
  Delta compression using up to 64 threads.
  Compressing objects: 100% (33/33), done.
  Writing objects: 100% (36/36), 46.31 KiB, done.
  Total 36 (delta 8), reused 0 (delta 0)
  To https://github.com/simon-m-mudd/OneD_hillslope.git
  * [new branch]      master -> master
  Branch master set up to track remote branch master from origin.
----

Once you have uploaded an initial copy, you will need to keep it in sync with
local copies. You can push things to github with:

[source,console]
----
$ git push -u origin master
----

One thing that can go wrong is that your repository will be out of sync, and you will get messages like this:

[source,console]
----
! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'https://github.com/simon-m-mudd/OneD_hillslope.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
----

You can try to fix this by making a `pull` request:

[source,console]
----
$ git pull origin
----

and if you are lucky you will not have to engage in https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/[conflict resolution].
If you do get a conflict (for example if someone else has pushed a change and you started from an outdated file),
you will need to merge the files. Doing that is beyond the scope of this documentation,
but there are many resources on the web for using git so help is only a few electrons away.
