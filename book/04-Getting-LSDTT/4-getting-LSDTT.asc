:numbered:

== Getting LSDTopoTools

There are several ways to get our tools, but before you start downloading code,
you should be aware of how the code is structured.

=== Compiling the code

The software is delivered as C++ source code. Before you can run any analyses,
you need to compile it, using something called a https://en.wikipedia.org/wiki/Compiler[compiler].
You can think of a compiler as a translator, that translates the source code (which looks very vaguely like English)
into something your computer can understand, that is in the form of https://en.wikipedia.org/wiki/Assembly_language[1s and 0s].

The C++ source code has the extensions `.cpp` and `.hpp`.
In addition, there are files with the extension `.make`,
which give instructions to the compiler through the utility http://tldp.org/HOWTO/Software-Building-HOWTO-3.html[make].

**Don't worry** if this all sounds a bit complex. In practice you just need to run `make` (we will explain how to do that)
and the code will compile, leaving you with a program that you can run on your computer.

=== Driver functions, objects and libraries

LSDTopoTools consists of three distinct components:

* Driver functions: These are programs that are used to run the analyses. They take in topographic data and spit out derivative data sets.
* Objects: The actual number crunching goes on inside objects. Unless you are interested in creating new analyses or are part of the development team, you won't need to worry about objects.
* Libraries: Some of the software need separate libraries to work. The main one is the http://math.nist.gov/tnt/[TNT] library that handles some of the computational tasks.
  Unless otherwise stated, these are downloaded with the software and you should not need to do anything special to get them to work.

When you download the code, the objects will sit in a root directory.
Within this directory there will be `driver_function_*` directories as well as a `TNT` directory.


==== Driver functions

If you are using LSDTopoTools simply to produce derivative datasets from your topographic data,
the programs you will use are **driver functions**. When compiled  these form self enclosed analysis tools.
Usually they are run by calling parameter files that point to the dataset you want to analyze, and the parameters you want to use in the analysis.

The `.make` files, which have the instructions for how the code should compile, are located in the `driver_functions_*` folders.

For example, you might have a driver function folder called `/home/LSDTopoTools/driver_functions_chi`,
and it contains the following files:

[source, console]
----
smudd@achray driver_functions $ pwd
/home/LSDTopoTools/driver_functions_chi
smudd@achray driver_functions $ ls
chi_get_profiles_driver.cpp       chi_step1_write_junctions_driver.cpp
chi_get_profiles.make             chi_step1_write_junctions.make
chi_m_over_n_analysis_driver.cpp  chi_step2_write_channel_file_driver.cpp
chi_m_over_n_analysis.make        chi_step2_write_channel_file.make
----

In this case the `.make` files are used to compile the code, and the `.cpp` files are the actual instructions for the analyses.

==== Objects

LSDTopoTools contains a number of methods to process topographic data, and these methods live within *objects*.
The *objects* are entities that store and manipulate data.
Most users will only be exposed to the driver functions,
but if you want to create your own analyses you might have a look at the objects.

The objects sit in the directory below the driver functions. They all have names starting with `LSD`,
so, for examples, there are objects called `LSDRaster`, `LSDFlowInfo`, `LSDChannel` and so on.
Each object has both a `.cpp` and a `.hpp` file.

If you want the details of what is in the objects in excruciating detail,
you can go to our automatically generated documentation pages, located here: http://www.geos.ed.ac.uk/~s0675405/LSD_Docs/index.html.

==== Libraries

THe objects in LSDTopoTools required something called the http://math.nist.gov/tnt/[Template Numerical Toolkit],
which handles the rasters and does some computation. It comes with the LSDTopoTools package.
You will see it in a subfolder within the folder containing the objects.
This library compiled along with the code using instructions from the makefile.
That is, you don't need to do anything special to get it to compile or install.

There are some other libraries that are a bit more complex which are used by certain LSDTopoTools packages,
but we will explain those in later chapters when we cover the tools that use them.

=== Getting the code

Okay, now to actually get the code! There are several versions floating around.
**They are not all the same!**. The best two ways to get the code both involve downloading the code from https://github.com[github].

One way to do this is to go into a repository and download the repository as a `.zip` file.

If, however, you are planning on keeping up with updates, it is probably better to use the software `git` to get the code.


==== Latest release versions on GitHub

We post the latest release versions of the software on https://github.com[GitHub].

The github site is: https://github.com/LSDtopotools.
This site contains a number of offerings: documentation, notes, automation scripts, plotting scripts and other goodies.
At the moment (September, 2015) the "latest release" offerings here are rather limited,
but we hope to change this in the near future.

==== CSDMS

When we publish papers that use new algorithms, we tend to post the code on the
Community Surface Dynamics Modeling System website, found here: http://csdms.colorado.edu/wiki/Main_Page.

These versions are the ones used in the publications, so they are representative of the code used in the papers but not the latest versions.
Currently our http://csdms.colorado.edu/wiki/Main_Page[CSDMS] offerings are:

* A tool for examining river profiles: http://csdms.colorado.edu/wiki/Model:Chi_analysis_tools
* A tool for finding channel heads: http://csdms.colorado.edu/wiki/Model:DrEICH_algorithm
* A tool for measuring hillslope length: http://csdms.colorado.edu/wiki/Model:Hilltop_flow_routing
* A tool for finding bedrock outcrops: http://csdms.colorado.edu/wiki/Model:SurfaceRoughness


=== Summary

You should now have some idea as to where to retrieve the code,
and what you will find in your directories once it is downloaded.
We are now ready to actually move on to using the code!
