:numbered:
=== Analyzing Dimensionless Relationships
Once the code has been run and the data has been generated, it can be processed using the Python script `Plot_ER_Data.py` which was downloaded into the directory:

[source,console]
----
$ pwd
/home/LSDTT_repositories/ER_Star
$ ls
bin_data.py  Plot_ER_Data.py  Settings.py
----

The three Python files are all needed to perform the E* R* analysis. The main code is contained within `Plot_ER_Data.py` and it makes use of `bin_data.py` to perform the binning of the data. The file `Settings.py` is the file that users should modify to run the code on their data.

`Settings.py` is a large parameter file which must be modified to reflect our input data and the nature of the plots we want to generate. Each parameter is described within the file, but these descriptions are also produced here for clarity. It should be noted that a useful method for managing large sets of data and plotting permutations is to generate several `Settings.py` files and swapping between them as needed. The following tables outline all of the parameters which can be used to configure the E* R* plots.


[cols="1,1,2", options="header"]
.Paramter information to load data.

|===
|Parameter Name
|Possible Values
|Description

|Path
|Any valid path
|Must be wrapped in quotes with a trailing slash eg 'home/user/data/'

|Prefix
|Filename prefix
|Must be wrapped in quotes and match the prefix used in `ER_STAR.cpp`

|Order
|Any integer
|Basin order used in `ER_STAR.cpp` to extract the drainage basins. eg 1,2,5

|===

[cols="1,1,2", options="header"]
.Options to select data to be plotted

|===
|Parameter Name
|Possible Values
|Description

|RawFlag
|0 or 1
|Use 1 to plot the raw data and 0 to not plot it.

|DensityFlag
|Any integer
|Use 0 to not plot the raw data as a density plot and 1 to plot a density plot. Values greater than 1 will be used the thin the data. For example 2 will plot every second point. Reccommended!

|BinFlag
|'raw', 'patches' or ''
|Use 'raw' to bin the raw data, 'patches' to bin the hilltop patch data and an empty string, '' to not perform binning. Note that quotes are needed for all cases.

|NumBins
|Any integer
|Number of bins to be generated. Must be an integer. eg 5,11,20. Will be ignored if `BinFlag` is left blank.

|PatchFlag
|0 or 1
|Use 1 to plot the patch data and 0 to not plot it.

|BasinFlag
|0 or 1
|Use 1 to plot the basin data and 0 to not plot it.

|LandscapeFlag
|0 or 1
|Use 1 to plot the landscape average data and 0 to not plot it.

|===

[cols="1,1,2", options="header"]
.Options controlling the fitting of the critical gradient

|===
|Parameter Name
|Possible Values
|Description

|Sc_Method
|A real number or 'raw', 'patches' or 'basins'
|Either input a real number eg 0.8,1.2,1.052 to set the Sc value and avoid the fitting of Sc. Or select 'raw','patches' or 'basins' (including the quotes) to use the named dataset to constrain the best fit Sc value through bootstrapping.

|NumBootsraps
|Any integer
|Number of iterations for the bootstrapping procedure. 10000 is the default, larger values will take longer to process.

|===

[cols="1,1,2", options="header"]
.Options controlling the plot style

|===
|Parameter Name
|Possible Values
|Description

|ErrorBarFlag
|True or False
|True to plot errorbars on datapoints, False to exclude them. Errorbars are generated as the standard error unless otherwise stated.

|Format
|'png','pdf','ps','eps','svg'
|File format for the output E* R* plots. Must be one of: 'png','pdf','ps','eps','svg', including the quotes.

|GabilanMesa
|True or False
|True to plot the example data from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)], False to exclude it.

|OregonCoastRange
|True or False
|True to plot the example data from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)], False to exclude it.

|SierraNevada
|True or False
|True to plot the example data from http://onlinelibrary.wiley.com/doi/10.1029/2011JF002057/abstract[Hurst et al. (2012)], False to exclude it.

|===

==== Density Plot
Firstly we will generate a density plot from the raw E* R* data. To do this we must update the path to our data files, the prefix and the basin order so that our files can be loaded. These modifications can be done in any text editor.

As we want to display a density plot we must also place a value other than 0 for the `DensityFlag` parameter, and ensure that all other parameters in the second parameter table are set to 0 or in the case of `BinFlag`, an empty string ''.

We will set the critical gradient to a value of 0.8, to avoid running the bootstrapping calculations. `ErrorBarFlag` should be set to `False`, along with the example data options, and the file format can be left as the default value.

The below complete settings file has the comments removed for clarity, as these are not needed by the program.

[source,python]
----
# Parameters to load the data
Path = '/home/s0675405/data/'
Prefix = 'gabilan'
Order = 2

# Options to select data to be plotted
RawFlag = 0
DensityFlag = 1
BinFlag = ''
NumBins = 20
PatchFlag = 0
BasinFlag = 0
LandscapeFlag = 0

# Options regarding the fitting of the critical gradient
Sc_Method = 0.8
NumBootsraps = 100

# Plot style options
ErrorBarFlag = False
Format = 'png'

# Comparison data to be plotted from the other studies
GabilanMesa = False
OregonCoastRange = False
SierraNevada = False
----

Once the settings file has been generated, the code can be run from the terminal:

[source,console]
----
$ python Plot_ER_Data.py
----

This will write a file called `gabilan_E_R_Star.png` to the data folder, which should look like this:

image::images/gabilan_E_R_Star_density.png[Density plot]

This plot shows the density of the E* R* measurements for this test datatset, the data is quite sparse due to the small size of the input DEM, but the majority of data points still plot close to the steady state curve.

==== Hilltop Patch Plot

Having completed the first example plot it becomes very simple to re-run the code to generate different plots. In this example we will plot the hilltop patch data points with error bars. To do this we need to change our settings file as follows:

[source,python]
----
# Parameters to load the data
Path = '/home/s0675405/data/'
Prefix = 'gabilan'
Order = 2

# Options to select data to be plotted
RawFlag = 0
DensityFlag = 0
BinFlag = ''
NumBins = 20
PatchFlag = 1
BasinFlag = 0
LandscapeFlag = 0

# Options regarding the fitting of the critical gradient
Sc_Method = 0.8
NumBootsraps = 100

# Plot style options
ErrorBarFlag = True
Format = 'png'

# Comparison data to be plotted from the other studies
GabilanMesa = False
OregonCoastRange = False
SierraNevada = False
----

This set of parameters generates a small number of hilltop patch data points which plot in similar locations as the raw data.

image::images/gabilan_E_R_Star_patches.png[Patch plot]

To plot the basin average data, the same set of paramters would be used

==== Binned Plot

To bin the raw data, we need to set the `BinFlag` parameter to 'raw' and select a number of bins to place our data into:

[source,python]
----
# Parameters to load the data
Path = '/home/s0675405/data/'
Prefix = 'gabilan'
Order = 2

# Options to select data to be plotted
RawFlag = 0
DensityFlag = 0
BinFlag = 'raw'
NumBins = 20
PatchFlag = 0
BasinFlag = 0
LandscapeFlag = 0

# Options regarding the fitting of the critical gradient
Sc_Method = 0.8
NumBootsraps = 100

# Plot style options
ErrorBarFlag = True
Format = 'png'

# Comparison data to be plotted from the other studies
GabilanMesa = False
OregonCoastRange = False
SierraNevada = False
----

In this case, the result is fairly meaningless, as most of the bins have too few data points to be plottted, but on larger datasets this method can highlight landscape transience very clearly.

image::images/gabilan_E_R_Star_bins.png[Binned plot]

==== Fitting The Critical Gradient

The final example for this section is how to use the code to estimate the critical gradient of a landscape. This is performed by configuring the bootstrapping parameters and in this case we will use the patch data and 1000 iterations to compute the best fit critical gradient.

[source,python]
----
# Parameters to load the data
Path = '/home/s0675405/data/'
Prefix = 'gabilan'
Order = 2

# Options to select data to be plotted
RawFlag = 0
DensityFlag = 0
BinFlag = ''
NumBins = 20
PatchFlag = 1
BasinFlag = 0
LandscapeFlag = 0

# Options regarding the fitting of the critical gradient
Sc_Method = 'patches'
NumBootsraps = 1000

# Plot style options
ErrorBarFlag = True
Format = 'png'

# Comparison data to be plotted from the other studies
GabilanMesa = False
OregonCoastRange = False
SierraNevada = False

----

It should be noted that on a small dataset such as this the fitting will not be very robust as there are too few data points, but this example should demonstrate how to run the code in this manner on real data. The best fit critical gradient will be printed at the top of the final plot.

image::images/gabilan_E_R_Star_fit.png[Best fit plot]
