:numbered:
== Extracting Hillslope Lengths

This section gives an overview of how to use the hillslope length driver (*LH_Driver.cpp*)
and it's companion (*LH_Driver_RAW.cpp*) to quickly generate hillslope length data for a
series of basins, along with other basin average metrics within a larger DEM file. It
is assumed that you are already comfortable with using LSDTopoTools, and have worked
though the tutorial: <<First Analysis>>.

For applications considering landscapes at geomorphic (millenial) timescales use the main
driver, for event scale measurements use the RAW driver. All instructions on this page will
work for either driver. For convenience it will refer only to `LH_Driver.cpp` but either driver
can be used.

This code is used to to produce the data for Grieve et al. (in review.)

.Quick guide if you already know what you are doing
*****************************************************************************

Here is a quick overview of how to set up and run the code, if you have done it before:

. Generate a channel head file for the landscape.
. Get the window size for the surface fitting routines.
. Compile the code with: `make -f LH_Driver.make`
. Run the program `LH_Driver.out` using the path (with trailing slash), the filename prefix, window radius, basin order, a floodplain switch, and a switch to write rasters if desired as arguments.
. Analyse the resulting data files using python.
*****************************************************************************

=== Overview

This driver file will combine several LSDTopoTools Functions in order to generate
as complete a range of basin average and hillslope length metrics as possible. The tool will
generate:

. A HilltopData file with metrics calculated for each hilltop pixel which can be routed to a stream pixel.
. A file containing basin averaged values of hillslope lengths and other standard metrics.
. An optional collection of trace files, which can be processed to create a shapefile of the trace paths across the landscape.
These can be enabled by setting a flag inside the driver on line 141.

=== Input Data

This driver takes the following input data:

[cols="1,1,2", options="header"]
.Input data for the hillslope length code
|===
|Input data
|Input type
|Description

|Raw DEM
|A raster named `<prefix>_DEM.flt`.
|The raw DEM to be analysed.

|Channel Heads
|Channel head raster named `<prefix>_DEM_CH.flt`.
|A file containing channel heads, which can be generated using the http://csdms.colorado.edu/wiki/Model:DrEICH_algorithm[DrEICH algorithm]. See the <<Channel Extraction>> chapter for more information.

|Floodplain Mask
|A binary mask of floodplains named `<prefix>_FloodPlain.flt`.
|Floodplain data which can be used to ensure that analysis only occurs on the
hillslopes. This is an optional input.

|Surface Fitting Window Size
|A float
|The surface fitting window size can be constrained using the steps outlined in <<Selecting A Window Size>>. This should be performed to ensure the
correct parameter values are selected.

|===

=== Compile The Driver

The code is compiled using the provided makefile, `LH_Driver.make` and the command:

[source,console]
----
$ make -f LH_Driver.make
----

Which will create the binary file, `LH_Driver.out` to be executed.

=== Run The Hillslope Length Driver

The driver is run with six arguments:

Path:: The data path where the channel head file and DEM is stored. The output data
 will be written here too.
Prefix:: The filename prefix, without an underscore. If the DEM is called `Oregon_DEM.flt`
the prefix would be `Oregon`. This will be used to give the output files a distinct identifier.
Window Size:: Radius in spatial units of kernel used in surface fitting. Selected using window_size.
Stream Order:: http://en.wikipedia.org/wiki/Strahler_number[The Strahler number] of basins to be extracted. Typically
a value of 2 or 3 is used, to ensure a good balance between sampling density and basin area.
Floodplain Switch:: If a floodplain raster has been generated it can be added to the
channel network by setting this switch to `1`. This will ensure that hillslope traces terminate at the hillslope-fluvial
transition. If no floodplain raster is available, or required, this switch should be set to
`0`.
Write Rasters Switch:: When running this driver several derivative rasters can be generated
to explore the results spatially. If this is required, set this switch to `1`. To
avoid writing these files set the switch to `0`. The rasters which will be written are:

* A pit filled DEM
* Slope
* Aspect
* Curvature
* Stream network
* Drainage basins of the user defined order
* Hilltop curvature
* Hillslope length
* Hillslope gradient, computed as relief/hillslope length
* Relief
* A hillshade of the DEM

The syntax to run the driver on a unix machine is as follows:

[source,console]
----
$ ./LH_Driver.out <Path> <Prefix> <Window Radius> <Stream order> <Floodplain Switch> <Write Rasters Switch>
----

And a complete example (your path and filenames will vary):

[source,console]
----
$ ./LH_Driver.out /home/s0675405/DataStore/LH_tests/ Oregon 6 2 1 0
----

=== Analysing The Results

The final outputs are stored in two plain text files, which are written to the data
folder supplied as the argument `path`.

==== <Prefix>_Paper_Data.txt

This file contains all of the basin average values for each basin, these files contain
a large number of columns, providing a wealth of basin average data. The columns in the
file, from left to right are as follows:

** BasinID =  Unique ID for the basin.
** HFR_mean = Mean hilltop flow routing derived hillslope length.
** HFR_median = Median hilltop flow routing derived hillslope length.
** HFR_stddev = Standard deviation of hilltop flow routing derived hillslope length.
** HFR_stderr = Standard error of hilltop flow routing derived hillslope length.
** HFR_Nvalues = Number of values used in hilltop flow routing derived hillslope length.
** HFR_range = Range of hilltop flow routing derived hillslope length.
** HFR_min = Minimum hilltop flow routing derived hillslope length.
** HFR_max = Maximum hilltop flow routing derived hillslope length.
** SA_binned_LH = Hillslope length from binned slope area plot.
** SA_Spline_LH = Hillslope length from spline curve in slope area plot.
** LH_Density = Hillslope length from drainage density.
** Area = Basin area.
** Basin_Slope_mean = Mean basin slope.
** Basin_Slope_median = Median basin slope.
** Basin_Slope_stddev = Standard deviation of basin slope.
** Basin_Slope_stderr = Standard error of basin slope.
** Basin_Slope_Nvalues = Number of basin slope values.
** Basin_Slope_range = Range of basin slopes.
** Basin_Slope_min = Minimum basin slope.
** Basin_Slope_max = Maximum basin slope.
** Basin_elev_mean = Mean basin elevation.
** Basin_elev_median = Median basin elevation.
** Basin_elev_stddev = Standard deviation of basin elevation.
** Basin_elev_stderr = Standard error of basin elevation.
** Basin_elev_Nvalues = Number of basin elevation values.
** Basin_elev_Range = Range of basin elevations.
** Basin_elev_min = Minimum basin elevation.
** Basin_elev_max = Maximum basin elevation.
** Aspect_mean = Mean aspect of the basin.
** CHT_mean = Mean hilltop curvature of the basin.
** CHT_median = Median hilltop curvature of the basin.
** CHT_stddev = Standard deviation of hilltop curvature of the basin.
** CHT_stderr = Standard error of hilltop curvature of the basin.
** CHT_Nvalues = Number of hilltop curvature values used.
** CHT_range = Range of hilltop curvatures.
** CHT_min = Minimum hilltop curvature in the basin.
** CHT_max = Maximum hilltop curvature in the basin.
** EStar = stem:[E*] value from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** RStar = stem:[R*] value from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** HT_Slope_mean = Mean slope calculated using (relief/hillslope length).
** HT_Slope_median = Median slope calculated using (relief/hillslope length).
** HT_Slope_stddev = Standard deviation of slope calculated using (relief/hillslope length).
** HT_Slope_stderr = Standard error of slope calculated using (relief/hillslope length).
** HT_Slope_Nvalues = Number of slope values calculated using (relief/hillslope length).
** HT_Slope_range = Range of slopes calculated using (relief/hillslope length).
** HT_Slope_min = Minimum slope calculated using (relief/hillslope length).
** HT_Slope_max = Maximum slope calculated using (relief/hillslope length).
** HT_relief_mean = Mean relief.
** HT_relief_median = Median relief.
** HT_relief_stddev = Standard deviation of relief.
** HT_relief_stderr = Standard error of relief.
** HT_relief_Nvalues = Number of relief values used.
** HT_relief_range = Range of reliefs.
** HT_relief_min = Minimum relief.
** HT_relief_max = Maximum relief.

This file can be loaded and the data visualized using
http://github.com/sgrieve/LH_Paper_Plotting/tree/master/Analysis_Code[these python scripts].

==== <Prefix>_HilltopData.csv

This file contains hillslope metrics calculated for every hilltop pixel in the
dataset which was routed successfully to a stream pixel. The columns in the
file, from left to right are as follows:

** X is the x coordinate of the hilltop pixel.
** Y is the x coordinate of the hilltop pixel.
** hilltop_id is the value of the hilltop pixel.
** S is the slope calculated as relief/hillslope length.
** R is the relief, the change in elevation between the hilltop and the channel
** Lh is the hillslope flow length.
** BasinID is the junction outlet number of the basin the hilltop is within.
** StreamID is the value of the stream pixel reached by the trace.
** HilltopSlope is the gradient of the pixel hwere the trace started.
** DivergentCountFlag is the count of divergent pixels crossed. *Depreciated*
** PlanarCountFlag - Count of planar cells crossed *Depreciated*
** E_Star = stem:[E*] value from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** R_Star = stem:[R*] value from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** EucDist - Euclidean length of the trace from hilltop to channel

This file can be loaded and the data visualized using
http://github.com/sgrieve/LH_Paper_Plotting/tree/master/Analysis_Code[these python scripts].

==== Trace Files

An optional switch can be set within the code to print out the coordinates of the path
of each trace, allowing hilltop flow paths to be visualized. This option is not exposed at the command line as it will considerably slow the execution of the algorithm.

WARNING: This will generate a large number of text files, which some operating systems can struggle to handle.

To enable this feature open the driver file `LH_Driver.cpp` and find the following parameters which should be located around line 140:

[source,cpp]
bool print_paths_switch = false;
int thinning = 1;
string trace_path = "";
bool basin_filter_switch = false;
vector<int> Target_Basin_Vector;

These control the path file printing and give several options to limit the scope of the path printing to ensure a manageable number of files are generated. The possible values for each parameter are:

[cols="1,1,3", options="header"]
.Path file printing parameters
|===
|Parameter
|Input type
|Description

|`print_paths_switch`
|bool
|Set this to `true` to print paths and `false` to not print paths (the default)

|`thinning`
|int
|The default value of `1` will keep every trace, whereas any other value will thin the data and write every `nth` trace to a file.

|`trace_path`
|string
|The directory that the trace files will be written to, it is *strongly* recommended that this be an empty directory.

|`basin_filter_switch`
|bool
|Set this to `true` if you only want to write trace files contained within traget basins. `false` will process the whole DEM.

|`Target_Basin_Vector`
|Vector of ints
|If `basin_filter_switch` is set to true, populate this vector with the IDs of the basins to be studied.

|===

Once these parameters have been set, re-compile the driver following the steps in <<Compile The Driver>> and run the code. Once the code has executed a large number of files will have been generated in the supplied path. They are plain text, space delimited files which have the following headings:

** X Coordinate.
** Y Coordinate.
** Count of divergent pixels crossed during the trace.
** Hillslope length.
** Count of planar pixels crossed during the trace.
** E_Star from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** R_Star from http://www.sciencedirect.com/science/article/pii/S0012821X07006061[Roering et al. (2007)].
** Euclidean length of trace.

A python script is provided to process these files into a shapefile, which can be viewed in any GIS package, or plotted using other python scripts provided. The python script to process these files is located http://github.com/sgrieve/LH_Paper_Plotting/tree/master/Analysis_Code[here] and is called `trace_process_1_1.py`. To run this file, alter the input path to point to where the trace files are stored, and then set the output path to a new directory which must already exist.

The line:
[source,python]
----
files = files[::100] # only processing every 100th trace for speed
----

is used to thin the dataset to speed up processing, in case this was not performed earlier. Again, a value of `1` will keep all of the data, and any other integer will keep every `nth` file. Once the code has been executed a single shapefile will be produced in the user defined output directory.

=== Worked Example

In this final section a typical hillslope length analysis will be performed from start to finish to demonstrate how to use this algorithm on real data. For this example we will use a very small section of Gabilan Mesa, to facilitate rapid processing.

==== Getting the data

The data is located in the ExampleTopoDatasets repository. Firstly, we must create a new directory to store our topogrpahic data:

[source,console]
----
$ mkdir data
$ pwd
/home/s0675405/LH/data/
----

We will only take the data we need, which is the Gabilan Mesa DEM and the associated DrEICH channel head file, so we can use wget to download the data:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/gabilan.bil
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/gabilan.hdr
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/gabilan_CH.bil
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/gabilan_CH.hdr
----

You should now have the following files in your data folder:

[source,console]
----
$ pwd
/home/s0675405/LH/data/
$ ls
gabilan.bil  gabilan_CH.bil  gabilan_CH.hdr  gabilan.hdr
----

==== Getting The Code

Next we need to download the code from the CSDMS repository where the latest stable version of the hilltop flow routing algorithm is located. This can again be downloaded using wget and it will come as a zipfile, which should be extracted into a separate folder to the data:

[source,console]
----
$ wget https://github.com/csdms-contrib/Hilltop_flow_routing/archive/master.zip
$ unzip master.zip
----

Finally we need to get the visualization python scripts so we can explore the data:

[source,console]
----
$ wget https://github.com/sgrieve/LH_Paper_Plotting/archive/master.zip
$ unzip master.zip
----

Now we should have 3 folders, one with the data, one with the main c++ code and a third with the python code.

[source,console]
----
$ ls
data  Hilltop_flow_routing-master  LH_Paper_Plotting-master
----

==== Running The Code

We need to check that the filenames for our input and output data make sense in the `LH_Driver.cpp` file. Open the file in a text editor and look at the line which loads the DEM:

[source,cpp]
----
LSDRaster DEM((path+filename+"_dem"), "flt");
----

We are working with `bil` files, so need to change the `"flt"` to `"bil"`, which can be done with a simple search and replace within your text editor.

The code also expects our data to be tagged `*_dem` so lets rename our data files to make life simpler:

[source,console]
----
$ pwd
/home/s0675405/LH/data
$ mv gabilan.bil gabilan_dem.bil
$ mv gabilan.hdr gabilan_dem.hdr
$ mv gabilan_CH.bil gabilan_dem_CH.bil
$ mv gabilan_CH.hdr gabilan_dem_CH.hdr
$ ls
gabilan_dem.bil  gabilan_dem_CH.bil  gabilan_dem_CH.hdr  gabilan_dem.hdr
----

Now we can navigate back to the directory where the driver and makefile are stored and make the driver:

[source,console]
----
$ pwd
/home/s0675405/LH/Hilltop_flow_routing-master/driver_functions_GrieveLH2015
$ make -f LH_Driver.make
g++ -c -Wall -O3 -pg -g ../LSDParticle.cpp -o ../LSDParticle.o
g++ -c -Wall -O3 -pg -g ../LSDCRNParameters.cpp -o ../LSDCRNParameters.o
g++ -Wall -O3 -pg -g LH_Driver.o ../LSDMostLikelyPartitionsFinder.o ../LSDIndexRaster.o ../LSDRaster.o ../LSDFlowInfo.o ../LSDJunctionNetwork.o ../LSDIndexChannel.o ../LSDChannel.o ../LSDStatsTools.o ../LSDBasin.o ../LSDShapeTools.o ../LSDParticle.o ../LSDCRNParameters.o -o LH_Driver.out
----

Some warnings may appear which can be ignored as long as the final few lines look something like they do above and the file `LH_Driver.out` is created.

The binary file can then be run using the desired input arguments

[source,console]
----
./LH_Driver.out /home/s0675405/LH/data/ gabilan 5 2 0 0
----

Once the code is completed it will print some data to the screen about the success rate of the traces. Due to the nature of real topography there will always be a small number of failed traces, traces which hit the edge of the DEM should also be rare, but these are excluded from analysis as they are truncated. If these values are very large relative to the stream count, which denotes traces which have successfully completed, there may be a problem with your input data. In the case of this worked example we get the following results:

[source,console]
----
Hilltop count: 2170
Stream count: 2157
Fail count: 7
Uphill count: 0
Edge count: 6
----

Returning to the data folder we can see the the two data files described earlier in this chapter have been written.

[source,console]
----
$ pwd
/home/s0675405/LH/data
$ ls
gabilan_dem.bil     gabilan_dem_CH.hdr  gabilan_dreich__HilltopData.csv
gabilan_dem_CH.bil  gabilan_dem.hdr     gabilan_dreich_PaperData.txt
----

==== Plotting Data

We can now load the data files into the python scripts to visualize the data. Firstly, we can make a histogram to view the distribution of hillslope length values for our landscape using the `RAW_LH_Hist.py` script. We need to update the plotting parameters to reflect our data, the following lines can be edited within the script using any text editor:

[source,python]
----
#================ modifyable parameters start here ====================

#paths to the data and to save the figure to
path = '../../data/' #path to the folder contaning the hilltopdata files
filename = 'gabilan_dreich__HilltopData.csv'
figpath = path #path to save the final figures

#plot style parameters
xmax = 400
ymax = 40
xstep = 50
ystep = 10
title_move = 0.

#plot labels
location = 'Gabilan Mesa'

#================ modifyable parameters end here ====================
----

The plot style parameters require a bit of trial and error to get the the correct axis limits, so the code may need to be executed several times. Once the parameters have been set the script can be run at the command line:

[source,console]
----
python RAW_LH_Hist.py
----

Which produces a histogram within the data folder.

image::images/LH_Hist_Raw.png[Hillslope length histogram]

This process can be repeated to run any of the plotting scripts provided with this package, as each has a similar interface.

=== Summary

You should now be able to generate hillslope length data from high resolution topography.
