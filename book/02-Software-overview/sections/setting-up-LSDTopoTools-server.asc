=== Installing LSDTopoTools using VirtualBox and Vagrant

NOTE: These instructions will be similar for MacOS and Linux, the only real difference is that MacOS and Linux will have native https://en.wikipedia.org/wiki/Secure_Shell[ssh utilities] and so you will not need `putty.exe`. 

.Quick Instructions for using Vagrant for LSDTopoTools
************************************************
. Download and install https://www.virtualbox.org/[virtualbox].
. Download and install https://www.virtualbox.org/[vagrant]. You might have to restart your computer after this. 
. If you are on Windows, download http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty.exe]. If you are on Linux or MacOS you can skip this (they have built-in equivalents).
. Make a folder for your vagrant box. We tend to put ours in a directory called `VagrantBoxes`.
. Inside that directory make two new directories: `LSDTopoTools` and `Ubuntu_vagrant`. The second directory's name doens't matter, it is just for holding a vagrant file (see below). However ytou **MUST** have the `LSDTopoTools` directory. The directory name is **case sensitive**!
. Download one of our vagrantfiles: https://github.com/LSDtopotools/LSDTT_vagrantfiles into the `Ubuntu_vagrant` directory (again, the name of the directory doesn't matter).
. Rename the vagrantfile from the repo (either `Vagrantfile_32bit_FFTW` or `Vagrantfile_64bit_FFTW`) simply `vagrantfile`. Your operating system is almost certainly 64 bit, but on most computers you need to select 32 bit because the default setting is to disable 64 bit guest operating systems. This can be changed but only by expert users. 
. Open a terminal or powershell window and navigate to the directory with the vagrantfile. 
. Run `vagrant up` from the command line. 
+
WARNING: If you are running `vagrant up` for the first time it can take some time to download the https://www.vagrantup.com/docs/getting-started/boxes.html[base box]. They are several hundred Mb each!
+
. Run `vagrant provision` after the box has started. 
. If on Windows, you should now be able to use `putty.exe` to ssh into your LSDTopoTools server. The host name is almost always `127.0.0.1` and the port is almost always `2222`. 
. If you are on OS X or Linux you do not need `putty.exe`; all you need to do is type `vagrant ssh` into the command line. See the https://www.vagrantup.com/docs/getting-started/up.html[vagrant instructions]. 
************************************************


There are a number of ways to get **LSDTopoTools** working on your computer, of varying difficulty. 

. Get **LSDTopoTools** working natively in Windows or MacOS. This is possible, but very painful. 
. Get it working in a full Linux operating system via virtual machine software, such as https://www.virtualbox.org/[virtualbox]. Note that you can do this in Windows, Linux or MacOS operating systems. This is less painful and more reliable than option #1, but still painful.  
. Get it working on a locally hosted Linux server using https://www.virtualbox.org/[virtualbox] and https://www.vagrantup.com/[vagrant]. Again, you can do this on any common operating system. 

Be afraid of option #1. Be very afraid. Option #2 is reliable (you can see how to do it in the appendix) but it means you will need to install all the necessary software yourself, which can take several hours. 
Option #3, involving Vagrant, is largely automated. It will still take some time the first time you boot your vagrant virtual machine, since a bunch of software will be installed, but we do automate this process for you. 

==== First steps: Starting a Vagrant box

IMPORTANT: You will need sufficient space on your hard disk to host a guest operating system. You also need room for the **LSDTopoTools** dependencies. You will struggle if you have less than *5Gb* free. 

https://www.vagrantup.com/[Vagrant] is software that automates the creation and provisioning of virtual machines. What does that mean? It means that you will create a Linux server that runs inside of your day-to-day computer. This server will run even if you are using a different operating system (e.g., Windows). Vagrant machines can be configured using a vagrantfile, so you download our vagrantfile and you simply point vagrant to it and should get a working server that can run LSDTopoTools. 

. You need software for running virtual machines. We recommend https://www.virtualbox.org/[virtualbox] since it is both well supported and free. Download and install. Our instructions assume you are using virtual box. 

. Download and install https://www.vagrantup.com/[Vagrant].

. Vagrant works via command line, so you will need to know how to open a terminal on http://www.macworld.co.uk/feature/mac-software/get-more-out-of-os-x-terminal-3608274/[OS X], Linux (usually you can open one using `ctrl-alt-T`, but if you use Linux that means you were born knowing how to open a terminal), or a http://www.tenforums.com/tutorials/25581-windows-powershell-open-windows-10-a.html[Windows powershell]. 

. If you are working on Windows, you will probably have to restart after installing Vagrant so that Windows can register the path to Vagrant. 

. Okay, we now assume you have installed everything and are in a terminal or powershell. You need to make a directory where you keep information about your vagrant boxes. I made a folder names `vagrantboxes` and then subfolders for different boxes.

. If you are in Windows, you will need an https://en.wikipedia.org/wiki/Secure_Shell[ssh] utility to communicate with your vagrant box. You should download `putty.exe` from the http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty website]. In  Linux and MacOS *ssh* utilities are already installed. 

. Now you should fetch one of our vagrantfiles from our git repo: https://github.com/LSDtopotools/LSDTT_vagrantfiles
+
.Get the Vagrant Files
************************************************
. The 32 bit file is here: https://raw.githubusercontent.com/LSDtopotools/LSDTT_vagrantfiles/master/Vagrantfile_32bit_FFTW
. The 64 bit file is here: https://raw.githubusercontent.com/LSDtopotools/LSDTT_vagrantfiles/master/Vagrantfile_64bit_FFTW 
. Although most computers today are 64 bit, most of them, as default, disable guest 64 bit operating sytstems. Unless you know how to turn this on http://stackoverflow.com/questions/27884846/virtualization-not-enabled-in-bios[for example see this link], you should choose the 32 bit vagrantfile. 
. Save one of these files into the directory for your vagrant files. See below for the appropriate directory structure. 
************************************************
+
. Rename the vagrantfile from the repo (either `Vagrantfile_32bit_FFTW` or `Vagrantfile_64bit_FFTW`) simply `vagrantfile` 

. If you use our vagrant files, you will need to make a directory `LSDTopoTools` in the same directory as your folders for different vagrant boxes. 
For example, you might make a directory `C:\VagrantBoxes\`, and in that directory you can put both `LSDTopoTools` and `Ubuntu32_FFTW` (or some such name) directories. You will put the vagrant file in the `Ubuntu32_FFTW` directory. 
Your tree might look a bit like this:
+
[source, directory_struct]
----
C:\vagrantboxes\
|--Ubuntu32_FFTW
   |-- vagrantfile
|--Ubuntu64_FFTW
   |-- vagrantfile
|--LSDTopoTools
----
+ 
IMPORTANT: It is **ESSENTIAL** that the LSDTopoTools folder is present and is one directory level lower than the vagrant file. If this is not true, the vagrant machine will **NOT WORK**.
+
NOTE: In the above file structures the vagrantfiles have been renamed from the vagrant files in our repository. 
+
. Go into the folder with the operating system you want (e.g. `Ubuntu32_FFTW`): 
+
[source,console]
----
PS: > cd C:\VagrantBoxes
PS: > cd C:\Ubuntu32_FFTW
----
+
. Now start your vagrant box (this might take some time since it has to fetch stuff from the internet):
+
[source,console]
----
PS: > vagrant up
----
+
IMPORTANT: You do not need to download a "base box" (that is a Linux operating system, in this case 32 bit Ubuntu) before you run `vagrant up`: Vagrant does this for you. 
However if you are running `vagrant up` for the first time Vagrant will download the box for you which will take some time (it is ~400Mb). 
You will only need to download the base box once.
+
. Congratulations! You now have a functioning Vagrant box!! Now you need to log on to the box.
+
NOTE: If you want to update the base box you can use `vagrant box update` command from the powershell or terminal windows. 

==== Logging on to your Vagrant box

. All right! Your Vagrant box is running. Other than a sense of vague accomplishment, this doesn't really help you run LSDTopoTools. You need to log on to the box.
You will operate your vagrant box as a server: you log into the machine and run code on it, but you won't have pretty windows to look at. 
You will run everything through an ssh terminal, using a command line interface. 

. We do this using https://en.wikipedia.org/wiki/Secure_Shell[ssh].
+
.A note on your vagrant ssh server
************************************************
* https://en.wikipedia.org/wiki/Secure_Shell[ssh] allows you to communicate securely with a server on an unsecured connection (it encrypts communication between you and the server). 
* You will use ssh to communicate with your Vagrant server. This server is *not on the internet* but rather is living *on your computer*. 
* Vagrant is clever in that it sets up an https://en.wikipedia.org/wiki/IP_address[IP address] for your vagrant server (in other words your Linux machine living on your host computer, which could be Windows, Linux or OSX), and as such ssh can establish a connection to this machine via ssh. 
* Vagrant's default settings are to set your server up to sit on host **127.0.0.1** and port **2222**. You will need to use these settings in putty.exe
* When you first log in, putty or other ssh clients will ask you to cache a new host key. 
************************************************
+
. If you are starting from a Linux or OSX machine, an ssh client is built into your command prompt and you can just type `vagrant ssh` into the command prompt.

. If you are on Windows, you need to download http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty.exe] and run it. 

. In putty, set the host to **127.0.0.1** and the port to **2222**. These are vagrant's default settings. 

. You will need to add the RSA key to your cache (just say yes: remember you are not connecting to the internet where baddies can spy on you but rather a server running on your own computer). 

. Now you need to **log in**. Your vagrant box has a *username* of **vagrant** and a password of **vagrant**.

==== Your Vagrant box and file syncing

. So you are logged in. Now what? It turns out Vagrant has done some clever things with your files. 

. Vagrant can https://www.vagrantup.com/docs/getting-started/synced_folders.html[sync folders] across your Vagrant box and your host computer (that is, the computer you started vagrant from).

. When you log in to your vagrant box, you will not be in the same folder where I have built the **LSDTopoTools** file structures. You need to navigate down to this:
+
[source,console]
-------------------------------
$ pwd
/STUFF
$ cd ..
$ cd ..
$ pwd
/STUFF
$ cd LSDTopoTools
$ ls
STUFF
-------------------------------
+
You can also jump directly there:
[source,console]
-------------------------------
$ cd /LSDTopoTools
-------------------------------
+

. As you can see above, the **LSDTopoTools** folder contains folders for different **LSDTopoTools** packages, for topographic datasets.
+
. Here is the amazing thing: the files that are in LSDTopoTools folder in your vagrant box **ARE ALSO** visible, and synced, in your host computer. 
So if you use **LSDTopoTools** to do some analysis within your vagrant box, you will be able to see the files within your host computer as well.
This means that you can, for example, do a Linux based **LSDTopoTools** analysis and then plot that analysis in a GIS on your host windows box without having to transfer files. 
Not only that, but you can modify the code, update python scripts, change parameter files, etc., with your favourite text editor in Windows (or OSX, or whatever) and those files will be visible to your Vagrant box. Fantastic!

==== Updating to the latest versions of the software

To check out the latest version of our software you can run the https://www.vagrantup.com/docs/cli/provision.html[vagrant provision] command
[source,console]
-------------------------------
PS: > vagrant up
PS: > vagrant provision
-------------------------------

==== Shutting things down

When you are finished with your session, you just need to go into the powershell or a terminal and type:

[source,console]
-------------------------------
PS: > vagrant halt
-------------------------------


==== If you want to start from scratch

If you want to remove the virtual machine, start it up and than run https://www.vagrantup.com/docs/cli/destroy.html[vagrant destroy]:

[source,console]
-------------------------------
PS: > vagrant up
PS: > vagrant destroy
-------------------------------

==== Brief notes for setting up your own Vagrant server

IMPORTANT: This section is for customising your vagrant environment (or rather, your Ubuntu environment that vagrant sets up for you) and can be safely ignored by 95% of **LSDTopoTools** users. We include the below notes for obsessive hackers who have nothing better to do. 

We have written Vagrant files for you so you don't have to customise your working environment, but if you want to set up your own Vagrant boxes with your own software here are some notes. 


===== Initiating a Vagrant box

1. Go into an empty folder to start a new Vagrant box. 
2. Initiate Vagrant with:
+
[source,console]
-------------------------------
PS> C:\> vagrant init
-------------------------------
+
Alternatively you can initiate with a `base box`. In this example we use the Ubuntu precise 32 base box:
+
[source,console]
-------------------------------
PS> C:\vagrant init ubuntu/precise32
-------------------------------
+
3. This command (`init`) will simply make a vagrant file. To get the server up and running you need to `up` it. Before you do that you probably want to modify the vagrant file. 
4. One of the things you probably need to modify is the memory assigned to your guest vagrant box. In the vagrant file you should have:
+
[source,vagrantfile]
-------------------------------
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = "3000"
  end
-------------------------------
+
The default memory is something small, and the problem with it is that it will take the guest operating system too long to boot, and vagrant will time out. I would give the vagrant box 3-4 Gb of memory. 
+
5. Now you can `up` your vagrant box. In the folder with the vagrant file, type:
+
[source,console]
-------------------------------
PS> vagrant up
-------------------------------
+
6. If this is the first time booting the linux machine, this will take a while.


===== Notes on the base box

Vagrant sets up a Linux server living in your computer (it is called the *Host* computer). The server will run a Linux operating system, and you need to choose a functioning base system 
https://atlas.hashicorp.com/boxes/search[vagrant base boxes]. Here we have started with `ubuntu/precise32`. You might want to try other base boxes, they can be found at the https://atlas.hashicorp.com/boxes/search[atlas website].

NOTE: If you choose a base box that you do not already have (and you start with none), vagrant will download it. They are big!! Usually over 500Mb (each is a fully operational linux operating system). You will either need a fast internet connection or a lot of time. Make sure you also have enough room on your hard disk. 

**You do need to be careful with base boxes!**

IMPORTANT: Not all base boxes work! On many windows machines, you can only run a 32 bit version of linux, even though you are almost certainly running 64 bit windows. You can change this by going into your BIOS and changing the settings, but that is dangerous and if you do not know what your BIOS is do not even think about attempting to change these settings.

In testing, I found many bases boxes did not work at all. The one that worked well for me was the `ubuntu/precise32` box. You can get this started with:

Alternatively you can just `vagrant init` and empty vagrant instance and change the box in the vagrantfile with `config.vm.box = "ubuntu/precise32"`.

You can update your base box with the command `vagrant box update`.

===== Details of provisioning

If you change your vagrantfile with the box still running, you can run the new provisioning with:

[source,console]
-------------------------------
PS> vagrant provision
-------------------------------

If you have downloaded our vagrant files, the provisioning of your virtual server should be automatic. However, you may wish to know what is happening during the provisioning, so here are some notes. 

To install software, we use the shell provisioning system of vagrant. This should go into the vagrantfile and will look a bit like this:

[source,vagrantfile]
-------------------------------
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get install -y git
  SHELL
-------------------------------

In the above shell command, we are installing git. The `-y` flag is important since apt-get will ask if you actually want to download the software and if you do not tell it `-y` from the shell script it will just abort the installation. 

You sync folders like this:

[source,vagrantfile]
-------------------------------
  config.vm.synced_folder "../LSDTopoTools", "/LSDTopoTools"
-------------------------------

Were the first folder is the folder on the host machine and the second is the folder on the Vagrant box. 
