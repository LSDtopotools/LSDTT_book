=== Installing LSDTopoTools on a Windows machine using VirtualBox and Vagrant

.Quick Instructions for using Vagrant for LSDTopoTools
************************************************
. Download and install https://www.virtualbox.org/[virtualbox].
. Download and install https://www.virtualbox.org/[vagrant]. You might have to restart your computer after this. 
. If you are on Windows, download http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty.exe].
. Make a folder for your vagrant box and download one of our vagrantfiles: https://github.com/LSDtopotools/LSDTT_vagrantfiles
. Rename the vagrantfile from the repo (either `Vagrantfile_32bit` or `Vagrantfile_64bit`) simply `vagrantfile` 
. Open a terminal or powershell window and navigate to the directory with the vagrantfile. 
. Run `vagrant up` from the command line. 
+
WARNING: If you are running `vagrant up` for the first time it can take some time to download the https://www.vagrantup.com/docs/getting-started/boxes.html[base box]. They are several hundred Mb each!
+
. Run `vagrant provision` after the box has started. 
. You should now be able to use `putty.exe` to ssh into your LSDTopoTools server. The host name is almost always `127.0.0.1` and the port is almost always `2222`. 
************************************************


There are a number of ways to get LSDTopoTools working on your computer, of varying difficulty. 

. Get LSDTopoTools working natively in Windows. This is possible, but very painful. 
. Get it working in a full Linux operating system via virtual machine software, such as https://www.virtualbox.org/[virtualbox]. Note that you can do this in Windows, Linux or Apple operating systems. 
. Get it working on a locally hosted linux server using https://www.virtualbox.org/[virtualbox] and https://www.vagrantup.com/[vagrant]. Again, you can do this on any common operating system. 

Be afraid of option #1. Be very afraid. Option #2 is reliable (you can see how to do it in the appendix) but it means you will need to install all the necessary software yourself, which can take several hours. 
Option #3, involving Vagrant, is a bit more automated. It will still take some time the first time you boot your vagrant virtual machine, since a bunch of software will be installed, but we do automate this process for you. 

==== First steps: starting vagrant

IMPORTANT: You will need sufficient space on your hard disk to host a guest operating system. You also need room for the LSDTopoTools dependencies. You will struggle if you have less than *20Gb* free. 

https://www.vagrantup.com/[Vagrant] is software that automates the creation and provisioning of virtual machines. What does that mean? It means that you will create a linux server that runs inside of your day-to-day computer. This server will run even if you are using a different operating system (e.g., Windows). Vagrant machines can be configured using a vagrantfile, so you download our vagrantfile and you simply point vagrant to it and should get a working server that can run LSDTopoTools. 

. You need software for running virtual machines. We recommend https://www.virtualbox.org/[virtualbox] since it is both well supported and free. Download and install. Our instructions assume you are using virtual box. 

. Download and install https://www.vagrantup.com/[Vagrant].

. Vagrant works via command line, so you will need to know how to open a terminal on http://www.macworld.co.uk/feature/mac-software/get-more-out-of-os-x-terminal-3608274/[OS X], linux (usually you can open one using `ctrl-alt-T`, but if you use linux that means you were born knowing how to open a terminal), or a http://www.tenforums.com/tutorials/25581-windows-powershell-open-windows-10-a.html[Windows powershell]. 

. If you are working on Windows, you will probably have to restart after installing Vagrant so that Windows can register the path to Vagrant. 

. Okay, we now assume you have installed everything and are in a terminal or powershell. You need to make a directory where you keep information about your vagrant boxes. I made a folder names `vagrantboxes` and then subfolders for different boxes.

. If you are in Windows, you will need an https://en.wikipedia.org/wiki/Secure_Shell[ssh] utility to communicate with your vagrant box. You should download `putty.exe` from the http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty website]. In  Linux and OSX ssh utilities are already installed. 

. Now you should fetch one of our vagrantfiles from our git repo: https://github.com/LSDtopotools/LSDTT_vagrantfiles

. Rename the vagrantfile from the repo (either `Vagrantfile_32bit` or `Vagrantfile_64bit`) simply `vagrantfile` 

. If you use our vagrant files, you will need to make a directory `LSDTopoTools` in the same directory as your folders for different vagrant boxes. 
For example, you might make a directory `C:\vagrantboxes\`, and in that directory you can put both `LSDTopoTools` and `Ubuntu32` (or some such name) directories. You will put the vagrant file in the `Ubuntu32` directory. 
Your tree might look a bit like this:
+
.Example directory structre
************************************************
pass:[C:]/vagrantboxes/ +
|--LSDTopoTools +
|--Ubuntu32 +
~~~|-- vagrantfile +
************************************************
+ 
The key is that the LSDTopoTools folder is one directory level lower than the vagrant file. If this is not true, the vagrant machine will not work properly. 




===== Brief notes for setting up your own vagrant server

1. Go into an empty folder to start a new vagrant box. 
2. Initiate vagrant with:
+
[source,console]
-------------------------------
PS> C:\> vagrant init
-------------------------------
+
Alternatively you can initiate with a `base box`. In this example we use the Ubuntu precise 32 base box:
+
[source,console]
-------------------------------
PS> C:\vagrant init ubuntu/precise32
-------------------------------
+
3. This command (`init`) will simply make a vagrant file. To get the server up and running you need to `up` it. Before you do that you probably want to modify the vagrant file. 
4. One of the things you probably need to modify is the memory assigned to your guest vagrant box. In the vagrant file you should have:
+
[source,vagrantfile]
-------------------------------
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = "3000"
  end
-------------------------------
+
The default memory is something small, and the problem with it is that it will take the guest operating system too long to boot, and vagrant will time out. I would give the vagrant box 3-4 Gb of memory. 
+
5. Now you can `up` your vagrant box. In the folder with the vagrant file, type:
+
[source,console]
-------------------------------
PS> C:\vagrant up
-------------------------------
+
6. If this is the first time booting the linux machine, this will take a while.


===== Notes on the base box

Vagrant sets up a linux server living in your computer (it is called the *Host* computer). The server will run a linux operating system, and you need to choose a functioning base system 
https://atlas.hashicorp.com/boxes/search[vagrant base boxes]. Here we have started with `ubuntu/precise32`. You might want to try other base boxes, they can be found at the https://atlas.hashicorp.com/boxes/search[atlas website].

NOTE: If you choose a base box that you do not already have (and you start with none), vagrant will download it. They are big!! Usually over 500Mb (each is a fully operational linux operating system). You will either need a fast internet connection or a lot of time. Make sure you also have enough room on your hard disk. 

**You do need to be careful with base boxes!**

IMPORTANT: Not all base boxes work! On many windows machines, you can only run a 32 bit version of linux, even though you are almost certainly running 64 bit windows. You can change this by going into your BIOS and changing the settings, but that is dangerous and if you do not know what your BIOS is do not even think about attempting to change these settings.

In testing, I found many bases boxes did not work at all. The one that worked well for me was the `ubuntu/precise32` box. You can get this started with:

Alternatively you can just `vagrant init` and empty vagrant instance and change the box in the vagrantfile with `config.vm.box = "ubuntu/precise32"`.

==== Details of provisioning

If you have downloaded our vagrant files, the provisioning of your virtual server should be automatic. However, you may wish to know what is happening during the provisioning, so here are some notes. 

To install software, we use the shell provisioning system of vagrant. This should go into the vagrantfile and will look a bit like this:

[source,vagrantfile]
-------------------------------
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get install -y git
  SHELL
-------------------------------

In the above shell command, we are installing git. The `-y` flag is important since apt-get will ask if you actually want to download the software and if you do not tell it `-y` from the shell script it will just abort the installation. 