=== Get the code for floodplain and terrace extraction

The code for floodplain/terrace extraction can be found in our GitHub repository.  This repository contains code for identifying floodplains based on relief relative to the nearest channel, and getting terraces along a channel swath profile.

==== Getting the code using LSDTopoToolsSetup.py
*******************************************
If you have set up LSDTopoTools using our vagrant distribution, then you can use the python script https://github.com/LSDtopotools/LSDAutomation/blob/master/LSDTopoToolsSetup.py[LSDTopoToolsSetup.py] to automatically download and compile the floodplain and terrace code.  It is downloaded automatically by the vagrant machine into the `/LSDTopoTools/` folder, or you can get it https://github.com/LSDtopotools/LSDAutomation/blob/master/LSDTopoToolsSetup.py[here] and place it into the `/LSDTopoTools/` folder.

To compile the channel extraction tool run:
[source,console]
----
$ cd /LSDTopoTools/
$ python LSDTopoToolsSetup.py -id 0 -sd True -FT True
----
This script will automatically download and compile the floodplain and terrace code, as well as installing the http://pointclouds.org/[Point Cloud Library] which is required for the swath analysis.
*******************************************


==== Clone the GitHub repository (not needed if you used LSDTopoToolsSetup.py)

If you haven't run our vagrant setup, you need to clone the repository. First navigate to the folder where you will keep the GitHub repository.  In this example it is called `/LSDTopoTools/Git_projects/`. To navigate to this folder in a UNIX terminal use the `cd` command:

[source,console]
----
$ cd /LSDTopoTools/Git_projects/
----

You can use the command `pwd` to check you are in the right folder.  Once you are in this folder, you can clone the repository from the https://github.com[GitHub website]:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ git clone https://github.com/LSDtopotools/LSDTopoTools_FloodplainTerraceExtraction.git
----
==== Alternatively, get the zipped code

If you don't want to use _git_, you can download a zipped version of the code:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ wget https://github.com/LSDtopotools/LSDTopoTools_FloodplainTerraceExtraction/archive/master.zip
$ gunzip master.zip
----

NOTE: https://github.com[GitHub] zips all repositories into a file called `master.zip`,
so if you previously downloaded a zipper repository this will overwrite it.

==== Install the Point Cloud Library

If you aren't working on our vagrant system, you will need to make sure that you have the http://pointclouds.org/[Point Cloud Library] installed.  You can do this on Linux using the `apt-get` command:

[source,console]
----
$ sudo add-apt-repository ppa:v-launchpad-jochen-sprickerhof-de/pcl
$ sudo apt-get update
$ sudo apt-get install libpcl-all
----

===== Ubuntu 16.04 LTS

If you are using ubuntu 16.04, the above commands won't work as the repository is broken. You can install the `pcl` library using the following steps:

Install oracle-java8-jdk:
[source,console]
----
$ sudo add-apt-repository -y ppa:webupd8team/java && sudo apt update && sudo apt -y install oracle-java8-installer
----

Install various dependencies and pre-requisites:
[source,console]
----
$ sudo apt -y install g++ cmake cmake-gui doxygen mpi-default-dev openmpi-bin openmpi-common libusb-1.0-0-dev libqhull* libusb-dev libgtest-dev
$ sudo apt -y install git-core freeglut3-dev pkg-config build-essential libxmu-dev libxi-dev libphonon-dev libphonon-dev phonon-backend-gstreamer
$ sudo apt -y install phonon-backend-vlc graphviz mono-complete qt-sdk libflann-dev libflann1.8 libboost1.58-all-dev

$ cd ~/Downloads
$ wget http://launchpadlibrarian.net/209530212/libeigen3-dev_3.2.5-4_all.deb
$ sudo dpkg -i libeigen3-dev_3.2.5-4_all.deb
$ sudo apt-mark hold libeigen3-dev

$ wget http://www.vtk.org/files/release/7.1/VTK-7.1.0.tar.gz
$ tar -xf VTK-7.1.0.tar.gz
$ cd VTK-7.1.0 && mkdir build && cd build
$ cmake ..
$ make
$ sudo make install
----
Install Point Cloud Library v1.8:

[source,console]
----
$ cd ~/Downloads
$ wget https://github.com/PointCloudLibrary/pcl/archive/pcl-1.8.0.tar.gz
$ tar -xf pcl-1.8.0.tar.gz
$ cd pcl-pcl-1.8.0 && mkdir build && cd build
$ cmake ..
$ make
$ sudo make install
----
Do some clean up:
[source,console]
----
$ cd ~/Downloads
$ rm libeigen3-dev_3.2.5-4_all.deb VTK-7.1.0.tar.gz pcl-1.8.0.tar.gz
$ sudo rm -r VTK-7.1.0 pcl-pcl-1.8.0
----
You should now have pcl installed on your system! You can do a small test of the installation if you want to:
[source,console]
----
$ cd ~
$ mkdir pcl-test && cd pcl-test
----

Create a CMakeLists.txt file and save this in the directory `pcl-test`:

----
cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(pcl-test)
find_package(PCL 1.2 REQUIRED)

include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_executable(pcl-test main.cpp)
target_link_libraries(pcl-test ${PCL_LIBRARIES})

SET(COMPILE_FLAGS "-std=c++11")
add_definitions(${COMPILE_FLAGS})
----

Create a file and call it `main.cpp`:

----
#include <iostream>

int main() {
    std::cout << "hello, world!" << std::endl;
    return (0);
}
----

Compile the cpp file and then test it :
[source,console]
----
$ mkdir build && cd build
$ cmake ..
$ make
$ ./pcl-test
----
Output should be `hello, world!`
