=== Floodplains

This section explains how to extract floodplains across the DEM. We have provided some example datasets which you can use in order to test the floodplain extraction.  If you are using the vagrant distribution, we recommend that you create a new directory in the `Topographic_projects` directory for each field site that you analyse.  Navigate to the `Topographic_projects` directory using the `cd` command:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ cd ..
$ cd Topographic_projects/
----

In this tutorial we will work using a LiDAR dataset from Mid Bailey Run, Ohio.  You should make a new directory for the Mid Bailey Run DEM in the `Topographic_projects` directory:

[source,console]
----
$ mkdir Mid_Bailey_Run/
$ cd Mid_Bailey_Run/
----

You can get the DEM for Mid Bailey Run from our ExampleTopoDatasets repository using `wget`:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/Bailey_DEM.bil
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/Bailey_DEM.hdr
----

This dataset is already in the preferred format for use with LSDTopoTools (the ENVI `bil` format). The figure below shows a shaded relief map of part of the South Fork Eel River DEM which will be used in these examples.

.Shaded relief image of Mid Bailey Run, OH, USA, UTM Zone 17N
image::images/Bailey_map.png[Shaded relief map of Mid Bailey Run, Ohio, 500, 600, align='center']

==== Get the example parameter files

We have also provided some examples parameter files that are used to run the floodplain delineation. You can get the example floodplain driver using `wget`:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/tree/master/example_parameter_files/ExampleFiles_FloodplainTerraceExtraction/LSDTT_floodplains.param
----
This should be placed in the same folder as your DEM and the channel heads `csv` file.  The example from Mid Bailey Run is called `LSDTT_floodplains.param` and should look like this:

[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /LSDTopoTools/Topographic_projects/Mid_Bailey_Run/
read fname: Bailey_DEM
write fname: Bailey_DEM
CHeads_file: Bailey_DEM_Wsources

# Parameters for floodplain extraction
Filter topography: true
Min slope filling: 0.0001
surface_fitting_window_radius: 6
Threshold_SO: 3
Relief lower percentile: 25
Relief upper percentile: 75
Slope lower percentile: 25
Slope upper percentile: 75
QQ threshold: 0.005
Min patch size: 1000
----
You can run the analysis on the Mid Bailey Run DEM using the example parameter file, and modify it as you wish for your own DEM.

WARNING: You must make sure the description of the parameter in your file matches EXACTLY to the example, or the code will not recognise the parameter properly. If in doubt, check your spelling.

The table below explains the function of each of these parameters:

[cols="1,1,2", options="header"]
.Explanation of the parameters used for terrace extraction
|===
|Parameter name
|Data type
|Description

|dem read extension
|String
|The file extension of your input DEM

|dem write extension
|String
|The file extension of the output rasters

|read path
|String
|The path to your DEM and parameter file

|read fname
|String
|The name of your DEM *without extension*

|CHeads_file
|String
|The name of the channel heads csv file *without extension*

|Filter topography
|Boolean
|Switch to run the filtering and filling of the DEM. Only set to false if you want to re-run the analysis (to save time).

|Min slope filling
|float
|Minimum slope for filling the DEM, suggested to be 0.0001

|surface_fitting_window_radius
|float
|Window radius for calculating slope, should be calculated using the window size routines

|Threshold_SO
|integer
|Threshold Strahler stream order for the nearest channel.  A value of 3 should work in most landscapes.

|Relief lower percentile
|integer
|Lower percentile for fitting Gaussian distribution to relief from quantile-quantile . Leave as 25 unless you have a weird quantile-quantile plot for the landscape.

|Relief upper percentile
|integer
|Upper percentile for fitting Gaussian distribution to relief from quantile-quantile plots. Leave as 75 unless you have a weird quantile-quantile plot for the landscape.

|Slope lower percentile
|integer
|Lower percentile for fitting Gaussian distribution to slope from quantile-quantile plots. Leave as 25 unless you have a weird quantile-quantile plot for the landscape.

|Slope upper percentile
|integer
|Upper percentile for fitting Gaussian distribution to rslope from quantile-quantile plots. Leave as 75 unless you have a weird quantile-quantile plot for the landscape.

|QQ threshold
|float
|Threshold for calculating difference between the real and Gaussian distributions from the quantile-quantile plots. Leave as 0.005 unless you have a weird quantile-quantile plot for the landscape.

|Min patch size
|integer
|Minimum number of pixels for each floodplain patch, can use to remove very small patches which may be due to noise.

|===

==== Compiling the code

Before the code can be run, you must compile it. To do this you need to go to the `driver_functions_Floodplains-Terraces` directory in the folder `LSDTopoTools_FloodplainTerraceExtraction`.  Navigate to the folder using the command:

[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTools_FloodplainTerraceExtraction/driver_functions_Floodplains-Terraces/
----

and compile the code with:

[source,console]
----
$ make -f get_floodplains.make
----

This may come up with some warnings, but should create the file `get_floodplains.out`. You can then run the program with:

[source,console]
----
$ ./get_floodplains.out /path/to/DEM/location/ name_of_parameter_file.param
----

For our example, the command would be:

[source,console]
----
$ ./get_floodplains.out /LSDTopoTools/Topographic_projects/Eel_River/ LSDTT_floodplains.param
----

The program should take between 10 - 40 minutes to run, depending on the size of your DEM and your processing power.  Once it is completed, you will have a number of `bil` files which you can open in a GIS of your choice.  These files will include:

. *DEM_name_filtered.bil and .hdr*: The original DEM after Perona-Malik filtering
. *DEM_name_channel_relief.bil and .hdr*: A raster of elevations compared to the nearest channel
. *DEM_name_slope.bil and .hdr*: A raster of local gradient
. *DEM_name_qq_relief.txt and _qq_slope.txt*: Text files with the quantile-quantile plot information. This can be plotted in our python script to check whether the thresholds selected were appropriate.
. *DEM_name_FP.bil and .hdr*: A raster of floodplain locations.

An example of the floodplains extracted from the Mid Bailey Run catchment is shown below. You should be able to get a raster similar to this by opening the file `Bailey_DEM_FP.bil` in a GIS of your choice.

.Floodplains extracted for the Mid Bailey Run catchment, Ohio.
image::images/Bailey_FP.png[Mid Bailey Run floodplains, align='center']
