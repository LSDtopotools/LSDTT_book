=== Terraces

This section explains how to extract terraces along a channel by providing coordinates specifying the upstream and downstream extent of the channel. We have provided some example datasets which you can use in order to test the terrace extraction.  If you are using the vagrant distribution, we recommend that you create a new directory in the `Topographic_projects` directory for each field site that you analyse.  Navigate to the `Topographic_projects` directory using the `cd` command:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ cd ..
$ cd Topographic_projects/
----

In this tutorial we will work using a LiDAR dataset from the South Fork Eel River, California.  You should make a new directory for the Eel River DEM in the `Topographic_projects` directory:

[source,console]
----
$ mkdir Eel_River/
$ cd Eel_River/
----

You can get the DEM for the South Fork Eel River from our ExampleTopoDatasets repository using `wget`:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/Eel_River_DEM.bil
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/Eel_River_DEM.hdr
----

This dataset is already in the preferred format for use with LSDTopoTools (the ENVI `bil` format). The figure below shows a shaded relief map of part of the South Fork Eel River DEM which will be used in these examples.

.Shaded relief image of the South Fork Eel River catchment, CA, USA, UTM Zone 10N
image::images/Eel_HS.png[Shaded relief map of the South Fork Eel River, 500, 600, align='center']

==== Get the example files

We have also provided two example files that are used to run the terrace extraction.  The first is a parameter file that is used to run the code, and the second is a `csv` file with the latitude and longitude of two points on the Eel River.  You can get the example files using `wget`:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/tree/master/example_parameter_files/ExampleFiles_FloodplainTerraceExtraction/LSDTT_terraces.param
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/tree/master/example_parameter_files/ExampleFiles_FloodplainTerraceExtraction/Eel_River_DEM_coordinates.csv
----
Make sure that these files are stored in the same place as the DEM!! This should be in the folder `/LSDTopoTools/Topographic_projects/Eel_River/`

==== Creating the parameter file

In order to run the terrace extraction code you must first create a parameter file for your DEM.  If you have been following this tutorial, you should have downloaded an example parameter file for the Eel River DEM and placed this in the same folder as your DEM and the channel heads `csv` file.  The example from the Eel River is called `LSDTT_Swath.param` and should look like this:

[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /LSDTopoTools/Topographic_projects/Eel_River/
read fname: Eel_River_DEM
CHeads_file: Eel_River_DEM_Wsources
coords_csv_file: Eel_River_DEM_coordinates.csv

# Parameters for DEM processing
Filter topography: true
Min slope filling: 0.0001
surface_fitting_window_radius: 6

# Parameters for swath post-processing
HalfWidth: 1000
search_radius: 10
Threshold_SO: 3
NormaliseToBaseline: 1

# Pararmeters for terrace extraction
QQ threshold: 0.005
Relief lower percentile: 25
Relief upper percentile: 75
Slope lower percentile: 25
Slope upper percentile: 75
Min patch size: 1000
Min terrace height: 5
----
You can run the analysis on the Eel River DEM using the example parameter file, and modify it as you wish for your own DEM.

WARNING: You must make sure the description of the parameter in your file matches EXACTLY to the example, or the code will not recognise the parameter properly. If in doubt, check your spelling.

The table below explains the function of each of these parameters:


[cols="1,1,2", options="header"]
.Explanation of the parameters used for terrace extraction
|===
|Parameter name
|Data type
|Description

|dem read extension
|String
|The file extension of your input DEM

|dem write extension
|String
|The file extension of the output rasters

|read path
|String
|The path to your DEM and parameter file

|read fname
|String
|The name of your DEM *without extension*

|CHeads_file
|String
|The name of the channel heads csv file *without extension*

|coords_csv_file
|String
|The name of the csv file with the coordinates to extract the terraces (must end in .csv)

|Filter topography
|Boolean
|Switch to run the filtering and filling of the DEM. Only set to false if you want to re-run the analysis (to save time).

|Min slope filling
|float
|Minimum slope for filling the DEM, suggested to be 0.0001

|surface_fitting_window_radius
|float
|Window radius for calculating slope, should be calculated using the window size routines

|HalfWidth
|integer
|Width of the swath profile in metres

|search_radius
|integer
|Number of pixels to search around input latitude/longitude coordinates for the nearest channel.

|Threshold_SO
|integer
|Threshold Strahler stream order for the baseline channel.  A value of 3 should work in most landscapes.

|NormaliseToBaseline
|integer
|Switch to normalise the elevations to the nearest channel. For terrace extraction this should always be set to 1.

|QQ threshold
|float
|Threshold for calculating difference between the real and Gaussian distributions from the quantile-quantile plots. Leave as 0.005 unless you have a weird quantile-quantile plot for the landscape.

|Relief lower percentile
|integer
|Lower percentile for fitting Gaussian distribution to relief from quantile-quantile . Leave as 25 unless you have a weird quantile-quantile plot for the landscape.

|Relief upper percentile
|integer
|Upper percentile for fitting Gaussian distribution to relief from quantile-quantile plots. Leave as 75 unless you have a weird quantile-quantile plot for the landscape.

|Slope lower percentile
|integer
|Lower percentile for fitting Gaussian distribution to slope from quantile-quantile plots. Leave as 25 unless you have a weird quantile-quantile plot for the landscape.

|Slope upper percentile
|integer
|Upper percentile for fitting Gaussian distribution to rslope from quantile-quantile plots. Leave as 75 unless you have a weird quantile-quantile plot for the landscape.

|Min patch size
|integer
|Minimum number of pixels for each terrace, can use to remove very small patches which may be due to noise.

|Min terrace height
|integer
|Threshold height for terraces above the channel to separate from modern floodplain.


|===

==== Getting the latitude and longitude coordinates

To run the code, you need to provide a CSV file with two pairs of coordinates which specify the upstream and downstream points between which you want to find the terraces.  The easiest way to do this is on Google Earth.

We have written the code so that it will take the coordinates in latitude and longitude and automatically convert them to the same UTM zone as the DEM - you don't need to do this yourself!  If you are following the tutorial for the Eel River site, then you should have downloaded the file `Eel_River_DEM_coordinates.csv` and placed this in the same folder as your DEM.  For example, the Eel River file has the following structure:

[source,csv_file]
----
Point_ID,latitude,longitude
1,39.722956,-123.650299
2,39.754546,-123.631409
----

IMPORTANT: The first point in the csv file must be the *upstream* point and the second point must be the *downstream* point. If this isn't the case then the code will break!

==== If you used LSDTopoToolsSetup.py

Navigate to the folder `driver_functions_Floodplains-Terraces` directory in the folder `LSDTopoTools_FloodplainTerraceExtraction`:

[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTools_FloodplainTerraceExtraction/driver_functions_Floodplains-Terraces/
----
You have already compiled the code, so you can just run the program with:

[source,console]
----
$ ./get_terraces.out /path/to/DEM/location/ name_of_parameter_file.param
----

For our example, the command would be:

[source,console]
----
$ ./get_terraces.out /LSDTopoTools/Topographic_projects/Eel_River/ LSDTT_terraces.param
----

==== If you didn't use LSDTopoToolsSetup.py

Before the code can be run, you must compile it. To do this you need to go to the `driver_functions_Floodplains-Terraces` directory in the folder `LSDTopoTools_FloodplainTerraceExtraction`.  Navigate to the folder using the command:

[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTools_FloodplainTerraceExtraction/driver_functions_Floodplains-Terraces/
----

and compile the code with:

[source,console]
----
$ bash get_terraces.sh
----

This may come up with some warnings, but should create the file `get_terraces.out`. You can then run the program with:

[source,console]
----
$ ./get_terraces.out /path/to/DEM/location/ name_of_parameter_file.param
----

For our example, the command would be:

[source,console]
----
$ ./get_terraces.out /LSDTopoTools/Topographic_projects/Eel_River/ LSDTT_terraces.param
----
==== Analysing the results
*******************************************************************
The program should take between 10 - 40 minutes to run, depending on the size of your DEM and your processing power.  Once it is completed, you will have a number of `bil` files which you can open in a GIS of your choice.  These files will include:

. *DEM_name_filtered.bil and .hdr*: The original DEM after Perona-Malik filtering
. *DEM_name_UTM_check.csv*: A csv file with the coordinates converted into UTM so you can check them in a GIS
. *DEM_name_swath_raster.bil and .hdr*: A raster of elevations compared to the main channel in the shape of the swath profile
. *DEM_name_terrace_IDs.bil and .hdr*: A raster of terrace locations with each terrace labelled with a unique ID
. *DEM_name_terrace_relief_final.bil and .hdr*: A raster of terrace pixels labelled by elevation compared to the baseline channel.
. *DEM_name_terrace_swath_plots.txt*: A text file with the information about the terraces compared to distance along the baseline channel that can be plotted using our Python script.

An example of the terraces extracted from the South Fork Eel River catchment is shown below. You should be able to get a raster similar to this by opening the file `Eel_River_DEM_terrace_relief_final.bil` in a GIS of your choice.

.Terrace heights above the channel for the South Fork Eel River, CA. Darker red = higher elevation above the main channel.
image::images/Eel_terraces.png[South Fork Eel terraces, 350, 600, align='center']
*******************************************************************
