[appendix]
== Setting up on Linux

Setting up your system on Linux is considerably easier than setting up on Windows.
Before doing anything, open a terminal window. The `$` symbol below indicates commands typed into the terminal window.

In Ubuntu, the terminal window is opened with `ctrl`+`alt`+`T`. You can also find it in the applications menu under accessories.  

WARNING: These commands are for *Ubuntu* and *Debian* flavors of Linux. Other flavors of Linux use different package managers, such as http://yum.baseurl.org/[yum].
If you don't use Debian of Ubuntu, you will need to look up the installation guidelines for the programs below.

=== Git

To check if git is working, type

[source,console]
----
$ git --version
----

If it isn't installed, install it with

[source,console]
----
$ sudo apt-get install git
----

=== pass:[C++] tools

You can check if these are working by typing (this assumes you are using the https://gcc.gnu.org/[GNU compilers])

[source,console]
----
$ g++
----

You can install these with

[source,console]
----
$ sudo apt-get install g++
----

These seem to install `gdb` and `make`, which is convenient.

==== pass:[C++] libraries

For more specialized versions of the code, you will need some libraries. Installing these can sometimes be tedious, 
sou you might want to wait until you actually need them before you install. 

===== Spectral analysis

Any analyses that use the RasterSpectral objects, which includes the LSDRasterModel, require the http://www.fftw.org/[**fast fourier transform libraries**]. In the source code, you will find `#include` statements for these libraries, and corresponding library flags in the makefile: ``-lfftw3``. In the RasterSpectral source files, we assume that you will have a fast fourier transform folder in your toplevel LSDTopoTools directory.

You can download FFTWv3 here: http://www.fftw.org/download.html

Installation should be fairly easy. Go to the FFTW download folder and run

[source,console]
----
$ ./configure
$ make
$ make install
----

===== The landscape evolution model

Our landscape evolution model (LSDRasterModel) requires http://www.fftw.org/[FFTW], http://www.boost.org/[Boost] and [MTL]. 

http://www.boost.org/[Boost]Boost contains a large number of header only libraries. 
You will need to know where you have unzipped them! But the good news is that you don't need to install anything. 

More information is here: http://www.boost.org/doc/libs/1_59_0/more/getting_started/unix-variants.html




=== Python

To check if it is working, just type

[source,console]
----
$ python
----

If it is working, it will tell you the version and you will get a command prompt that looks like this:

[source,console]
----
>>>
----

You should have version 2.7 or above.

==== Installing python

If you don't have python, you should install both *python* and *pip*, which manages python packages.
To do that type:

[source,console]
----
$ sudo apt-get install python2.7
$ sudo apt-get install python-pip
----

==== Installing python packages

To check if python packages are there, just try to import them. First start a python session:

[source,console]
----
$ python
----

Then, try to import a package. For example:

[source,console]
----
>>> import matplotlib
----

If the package does not exist, you will get an error message like this:

[source,console]
----
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named matplotlib
----

You can install all the packages at once with:

[source,console]
----
$ sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose
----

You can upgrade packages with the pip command:

[source,console]
----
$ pip install PackageNameHere --upgrade
----



=== Ruby

As mentioned in the main section of the book, the ruby programming language is used to build the documentation of our software. You can skip this part if you are viewing the documentation from the pdf or webpages and aren't planning on contributing to the documentation. (Though you if you are contributing new features to the software you are encouraged to!)

You can see if Ruby is on your system by typing:

[source,console]
----
$ ruby -v
----

If it isn't there, install with (this should seem routine by now):

[source,console]
----
$ sudo apt-get  install ruby-full
----

If you already have ruby installed, you might need to check you have the development packages too, along with rubygems, which is a package installer for ruby libraries and add-ons (similar to pip for Python):

[source,console]
----
$ sudo apt-get install ruby-dev
$ sudo apt-get install rubygems
----

==== Installing the asciidoctor documentation software

After you have installed ruby, ruby-devel, and rubygems you can now proceed to getting the actual ruby packages that make the documentation:

[source,console]
----
$ sudo gem install asciidoctor
$ sudo gem install bundler
----

If bundler fails to install, you may be missing the ttfunk package.:

[source,console]
----
$ sudo gem install ttfunk
----

Thankfully, the gem installer is quite helpful at telling you which packages are missing and how to quickly install them. That's it now, you can proceed to cloning the documentation from github.

=== Cloning or forking the documentation

The documentation is under version control on github, just like the actual software source code. If you're a developer, you can clone it direct from the original repository, otherwise you will need to fork it first into your own repo, and then clone from there to your local machine. You do this by visiting http://github.com/LSDtopotools/LSDTT_book and clicking 'fork' (assuming you have a github account of course). Then, on your local machine, you can do:

[source,console]
----
$ git clone https://github.com/LSDTopoTools/LSDTT_book.git
----

and the documentation will be cloned into a directory called LSDTT_book from where you ran the command.

cd into the LSDTT_book directory, and run bundler install:

[source,console]
----
$ bundler install
----

Then, to build the documentation in full from the source files, run:

[source,console]
----
$ bundler exec rake book:build
----

or to just build html:

[source,console]
----
$ bundler exec rake book:build_html
----

In a few seconds bundler will have completed and you will have a smart looking copy of the documentation in both pdf and html form. Any time you make changes to the documentation source files, run the bundler exec command again to update your local copy. Remember to commit and push your changes regularly to the remote repository on your githb account.

=== Summary

Well, you have probably spent some time installing all of these software packages so relax for a bit and enjoy the beverage of your choice!
