[appendix]
== Setting up on Linux

IMPORTANT: These instructions involve building your own operating system with a virtual machine. You can do this if you want more control, but most users should follow the simpler process of creating an lSDTopoTools server using Vagrant. Instructions can be found here: <<Installing LSDTopoTools using VirtualBox and Vagrant>>. 

Setting up your system on Linux is considerably easier than setting up on Windows.
Before doing anything, open a terminal window. The `$` symbol below indicates commands typed into the terminal window.

In Ubuntu, the terminal window is opened with `ctrl`+`alt`+`T`. You can also find it in the applications menu under accessories.  

WARNING: These commands are for *Ubuntu* and *Debian* flavors of Linux. Other flavors of Linux use different package managers, such as http://yum.baseurl.org/[yum].
If you don't use Debian of Ubuntu, you will need to look up the installation guidelines for the programs below.

NOTE: It is *MUCH* easier to run **LSDTopoTools** software in Vagrant server (basically because we install everything for you), but you should install programs for looking at your data (i.e., python, a GIS) on your host operating system (in this case your desktop version of Linux, versus the Linux server run by vagrant). In the case of Linux if you do install natively it will run faster than if you use a Vagrant server. 

=== A text editor

We recommend http://brackets.io/[Brackets]:

[source,console]
----
  $ sudo apt-get install brackets
----

Note that this will only work with a windowing system (i.e., not on a server-only version of Linux).

=== Git

To check if git is working, type

[source,console]
----
$ git --version
----

If it isn't installed, install it with

[source,console]
----
$ sudo apt-get install git
----

=== pass:[C++] tools

You can check if these are working by typing (this assumes you are using the https://gcc.gnu.org/[GNU compilers])

[source,console]
----
$ g++
----

You can install these with

[source,console]
----
$ sudo apt-get install g++
----

These seem to install `gdb` and `make`, which is convenient.

==== pass:[C++] libraries

For more specialized versions of the code, you will need some libraries. Installing these can sometimes be tedious, 
sou you might want to wait until you actually need them before you install.

===== Spectral analysis: the easy way

Any analyses that use the RasterSpectral objects, which includes the LSDRasterModel, require the http://www.fftw.org/[*fast fourier transform libraries*]. In the source code, you will find `#include` statements for these libraries, and corresponding library flags in the makefile: `-lfftw3`. In the **LSDTopoTools** packages that use FFTW, we include the correct header along with the source code so you shouldn't have to worry about that. 

Installation using sudo should be fairly easy. On Ubuntu just run:

[source,console]
----
$ sudo apt-get install fftw3
----

Debian should have a similar installation package. 

===== Spectral analysis: the hard way

If you want to compile FFTW yourself, you can go here: http://www.fftw.org/download.html

Installation should be fairly easy, but occasionally doesn't work. It also leave a load of files on your system that you don't need. Go to the FFTW download folder and run:

[source,console]
----
$ ./configure
$ make
$ make install
----

===== The landscape evolution model

Our landscape evolution model (LSDRasterModel) requires http://www.fftw.org/[FFTW], http://www.boost.org/[Boost] and http://www.simunova.com/mtl4[MTL]. 

http://www.boost.org/[*Boost*]. Boost contains a large number of header only libraries. 
You will need to know where you have unzipped them! But the good news is that you don't need to install anything. 

More information is here: http://www.boost.org/doc/libs/1_59_0/more/getting_started/unix-variants.html

The http://www.simunova.com/home[Matrix Template Library version 4] is also requires: 
this does some heavy duty computation on sparse matrices that is required for the landscape evolution model.

You can get download and installation instructions here: http://www.simunova.com/node/189

=== The Swath and Point Cloud tools

As mentioned in previous sections, these tools require the use of the following libraries and tools, which themselves come with further dependencies.

. The `cmake` utility. This is like `make` but is required for our tools that examine point clouds,
  since it is required by something called the http://pointclouds.org/[point cloud library].
. http://pointclouds.org/[pcl]: The Point Cloud Library.
. http://www.liblas.org/[libLAS]: a library for working with LAS format data.

==== PCL

Before you can install PCL however, it itself is dependent on some other things...

. blas (blas-devel)
. eigen3 (eigen-devel)
. flann
. libLAS

PCL, blas-devel, flann, eigen3 etc. can be installed in linux using the yum or apt-get commands in many distributions:

[source,console]
yum install blas-devel flann-devel eigen3-devel pcl-devel

You will need to check the exact names of these packages in your package repository manager first.

If you can't install using the above method, you will have to do a manual install following the instruction on the relevant websites. The PCL website is a good place to start for guidance. 

After installing these, you may run into the further problem that the location of the libraries on your system are not where the compiler thinks they are, because the installation folders are named by the version number, e.g. `/pcl-1.7.2` rather than just `/pcl`. You can get around this by creating symbolic links to these folders. From the include directory on your system, (mine was /usr/include/), type:

[source,console]
ln -s /usr/include/pcl-x.x.x /usr/include/pcl

and the same goes for the `eigen` library::

[source,console]
ln -s /usr/include/eigen3 /usr/include/Eigen

Right, we are nearly ready to go!

Except for the last library dependency...

==== libLAS

http://www.liblas.org/

If you thought installing *pcl* was a faff, *libLAS* takes things to a new level. It isn't included in most linux distribution package repositories, so you have to install it manually. Do not confuse it with the similarly named `Blas` or `libblas`, which ARE in the linux pacakge repositories but have nothing to do with the libLAS that we want (BLAS is a basic linear algebra library).

First of all, it is dependent on the `libgeotiff-devel` library, so go ahead and install that using yum or apt-get:

[source,console]
yum install libgeotiff-devel

It can be a good idea to update the library paths in linux at this point:

[source,console]
sudo ldconfig

Great. Now libLAS is also dependent on another package called *laszip*. The developers thought it would be too easy to simply include this as one package/download, so you first have to install this as well before we can even get started on the actual libLAS package. 

Get it here:  http://www.laszip.org/[laszip download]

Once you've unzipped it, in the top level directory run:

[source,console]
----
./configure
make
sudo make install
----

They should be installed in the `/usr/local/include/` directory. Which is bad, because they need to be in their own directory. So you have to root into the `/usr/local/include/`, create a `laszip` directory, and copy the laszip header files into this directory.

Magic. Now, we can install libLAS. It uses cmake to install itself. So in the libLAS directory, `mkdir` a `build` folder, `cd` into that, and run:

[source,console]
ccmake -G "Unix Makefiles" ../ 

A terminal dialogue opens. Make sure it has found the GEOTIFF directory. If not, you will need to find where the geotiff (see above) stuff was installed to, and enter the full path in the GEOTIFF box. 

Now look at the options below (we are still running ccmake here). Turn all the optional settings to `OFF`, it just makes things easier and less likely to go wrong during compilation. Hit configure. Save and exit. 

Now run:

[source,console]
----
make
sudo make install
----
  
Hopefully, cmake should do its thing and install libLAS for you. If not, open a large bottle of whisky and repeat the above steps to check you haven't missed anything. I find a peaty single malt works best here.

=== Python

To check if it is working, just type

[source,console]
----
$ python
----

If it is working, it will tell you the version and you will get a command prompt that looks like this:

[source,console]
----
>>>
----

You should have version **2.7** or above. Our python https://github.com/LSDtopotools/LSDPlotting[plotting] https://github.com/LSDtopotools/LSDMappingTools[scripts] are based on python **2.7** so you should probably have a version of that installed. 

==== Installing python

If you don't have python, you should install both *python* and *pip*, which manages python packages.
To do that type:

[source,console]
----
$ sudo apt-get install python2.7
$ sudo apt-get install python-pip
----

==== Installing python packages

To check if python packages are there, just try to import them. First start a python session:

[source,console]
----
$ python
----

Then, try to import a package. For example:

[source,console]
----
>>> import matplotlib
----

If the package does not exist, you will get an error message like this:

[source,console]
----
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named matplotlib
----

You can install all the packages at once with:

[source,console]
----
$ sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose
----

You can upgrade packages with the pip command:

[source,console]
----
$ pip install PackageNameHere --upgrade
----

==== Installing python with miniconda

Native Linux users will probably want to do things using *pip* (see below) but you can also use http://conda.pydata.org/miniconda.html[miniconda]. First install miniconda using http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install[instructions here]. We will use **Python 2.7**, so use the Python 2.7 installer. Then use the `conda` command to install stuff:

[source,consol]
----
  $ conda install scipy
  $ conda install matplotlib
  $ conda install pandas
  $ conda install gdal
  $ conda install spyder
----

To run spider you just type `spyder` at the command line. 

Warning: Spyder needs an older version of a package called *PyQt*. If spyder doesn't start correctly, run `conda install pyqt=4.10 -f`  

Note that spyder will only work if you have a windowing system (i.e., you can't use it via a ssh connection).


=== QGIS

You might want to look at your data in a GIS, and [http://www.qgis.org/en/site/]QGIS is a nice open-source option. Linux installers are on the https://www.qgis.org/en/site/forusers/download.html[QGIS downloads page]. You will need a windowing system for this (i.e., you can't do it on a server-only version of Linux). 

=== Inkscape

Many of our python https://github.com/LSDtopotools/LSDPlotting[plotting] https://github.com/LSDtopotools/LSDMappingTools[scripts] can output figures in https://en.wikipedia.org/wiki/Scalable_Vector_Graphics[svg format], which you can then edit in https://inkscape.org/en/[Inkscape], an open source editor that is similar to Illustrator. Inkscape also is happy with `.ai`, `.pdf` and `.eps` files. 

You can install with

[source,console]
----
 $ sudo add-apt-repository ppa:inkscape.dev/stable
 $ sudo apt-get update
 $ sudo apt-get install inkscape
----

You will need a windowing system for this. 

=== Ruby

As mentioned in the main section of the book, the ruby programming language is used to build the documentation of our software. You can skip this part if you are viewing the documentation from the pdf or webpages and aren't planning on contributing to the documentation. (Though you if you are contributing new features to the software you are encouraged to!)

You can see if Ruby is on your system by typing:

[source,console]
----
$ ruby -v
----

If it isn't there, install with (this should seem routine by now):

[source,console]
----
$ sudo apt-get  install ruby-full
----

If you already have ruby installed, you might need to check you have the development packages too, along with rubygems, which is a package installer for ruby libraries and add-ons (similar to pip for Python):

[source,console]
----
$ sudo apt-get install ruby-dev
$ sudo apt-get install rubygems
----

Note that in newer versions of Ruby, rubygems seems to install with ruby-full. 

==== Installing the asciidoctor documentation software

After you have installed ruby, ruby-devel, and rubygems you can now proceed to getting the actual ruby packages that make the documentation:

[source,console]
----
$ sudo gem install asciidoctor
$ sudo gem install bundler
----

If bundler fails to install, you may be missing the ttfunk package.:

[source,console]
----
$ sudo gem install ttfunk
----

Thankfully, the gem installer is quite helpful at telling you which packages are missing and how to quickly install them. That's it now, you can proceed to cloning the documentation from github.

=== Cloning or forking the documentation

The documentation is under version control on github, just like the actual software source code. If you're a developer, you can clone it direct from the original repository, otherwise you will need to fork it first into your own repo, and then clone from there to your local machine. You do this by visiting http://github.com/LSDtopotools/LSDTT_book and clicking 'fork' (assuming you have a github account of course). Then, on your local machine, you can do:

[source,console]
----
$ git clone https://github.com/LSDTopoTools/LSDTT_book.git
----

and the documentation will be cloned into a directory called LSDTT_book from where you ran the command.

cd into the LSDTT_book directory, and run bundler install:

[source,console]
----
$ bundler install
----

Then, to build the documentation in full from the source files, run:

[source,console]
----
$ bundler exec rake book:build
----

or to just build html:

[source,console]
----
$ bundler exec rake book:build_html
----

In a few seconds bundler will have completed and you will have a smart looking copy of the documentation in both pdf and html form. Any time you make changes to the documentation source files, run the bundler exec command again to update your local copy. Remember to commit and push your changes regularly to the remote repository on your githb account.

=== Summary

Well, you have probably spent some time installing all of these software packages so relax for a bit and enjoy the beverage of your choice!
