=== Get the code and data basinwide cosmogenic analysis

This section goes walks you through getting the code and example data,
and also describes the different files you will need for the analysis.

==== Get the source code for basinwide cosmogenics

First navigate to the folder where you will keep your repositories.
In this example, that folder is called `/home/LSDTT_repositories`.
In a terminal window, go there with the `cd` command:

[source,console]
----
$ cd /home/LSDTT_repositories/
----

You can use the `pwd` command to make sure you are in the correct directory.
If you don't have the directory, use `mkdir` to make it.

===== Clone the code from Git

Now, clone the repository from https://github.com[GitHub]:

[source,console]
----
$ pwd
/home/LSDTT_repositories/
$ git clone https://github.com/LSDtopotools/LSDTopoTools_CRNBasinwide.git
----

====== Alternatively, get the zipped code

If you don't want to use _git_, you can download a zipped version of the code:

[source,console]
----
$ pwd
/home/LSDTT_repositories/
$ wget https://github.com/LSDtopotools/LSDTopoTools_CRNBasinwide/archive/master.zip
$ gunzip master.zip
----

NOTE: https://github.com[GitHub] zips all repositories into a file called `master.zip`,
so if you previously downloaded a zipper repository this will overwrite it.

===== Compile the code

Okay, now you should have the code. You will still be sitting in the directory
`/home/LSDTT_repositories/`, so navigate up to the directory `LSDTopoTools_BasinwideCRN/driver_functions_BasinwideCRN/`.

[source,console]
----
$ pwd
/home/LSDTT_repositories/
$ cd LSDTopoTools_CRNBasinwide
$ cd driver_functions_CRNBasinwide
----

There are a number of makefiles (thse with extension `.make` in this folder).
These do a number of different things that will be explained later in this chapter.

==== Getting example data: The San Bernardino Mountains

We have provided some example data. This is on our Github example data website.

The example data has a number of digital elevation models in various formats,
but for these examples we will be only using one dataset, from the San Bernardino Mountains in California.

You should make a folder for your data using `mkdir` somewhere sensible.
For the purposes of this tutorial I'll put it in the following folder:

[source,console]
----
$ pwd
/home/ExampleDatasets/SanBernardino/
----

Again, we will only take the data we need, so use wget to download the data:

[source,console]
----
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/SanBern.bil
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/SanBern.hdr
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/example_parameter_files/Binnie_CRNData.csv
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/example_parameter_files/SanBern_data_analysis.CRNfiles
$ wget https://github.com/LSDtopotools/ExampleTopoDatasets/raw/master/example_parameter_files/SanBern_data_analysis.CRNparam
----

You should now have the following files in your data folder:

[source,console]
----
$ pwd
/home/ExampleDatasets/SanBernardino/
$ ls
SanBern.bil    Binnie_CRNData.csv              SanBern_data_analysis.CRNparam
SanBern.hdr    SanBern_data_analysis.CRNfiles
----

IMPORTANT: The file `SanBern_data_analysis.CRNfiles` will need to be modified with the appropriate paths to your files!

==== Setting up your data directories and parameter files

Before you can run the code, you need to set up some data structures.

NOTE: If you downloaded the example data, these files will already exist.
These instructions are for when you need to run CRN analysis on your own datasets.

. You can keep your topographic data separate from your cosmogenic data, if you so desire.
You'll need to know the directory paths to these data.
+
. In a single folder (again, it can be separate from topographic data),
you must put a i) *parameter file*, a *cosmogenic data file*, and a *raster filenames file* .
+
. These three files must have the same **prefix**, and each have their own extensions.
+
* The *parameter file* has the extension: `.CRNParam`.
* The *cosmogenic data file* has the extension `_CRNData.csv`.
* The *raster filenames file* has the extension `_CRNRasters.csv`.
+
. For example, if the prefix of your files is `Chile_data_analysis`,
then your three data files will be `Chile_data_analysis.CRNParam`,
`Chile_data_analysis_CRNData.csv`, and `Chile_data_analysis_CRNRasters.csv`.
+
. If the files do not have these naming conventions, the code **WILL NOT WORK**!
Make sure you have named your files properly.

===== The parameter file

The parameter file contains some values that are used in the calculation of both shielding and erosion rates.
This file must have the extension *.CRNParam*.

The parameter file could be empty, in which case parameters will just take default values.
However, you may set various parameters. The format of the file is:

[source,paramfile]
----
parameter_name: parameter_value
----

So for example a parameter file might look like:

[source,paramfile]
----
min_slope: 0.0001
source_threshold: 12
search_radius_nodes: 1
threshold_stream_order: 1
theta_step: 30
phi_step: 30
Muon_scaling: Braucher
write_toposhield_raster: true
write_basin_index_raster: true
----

IMPORTANT: There cannot be a space between the parameter name and the ":" character,
so `min_slope : 0.0002` will fail and you will get the default value.

In fact all of the available parameters are listed above, and those listed above are default values.
The parameter names are not case sensitive. The parameter values are case sensitive.
These parameters are as follows:

[cols="1,1,1,3", options="header"]
.File input and output options
|===
|Keyword
|Input type
|default
|Description

|min_slope
|float
|0.0001
|The minimum slope between pixels used in the filling function (dimensionless)

|source_threshold
|int
|12
|The number of pixels that must drain into a pixel to form a channel.
This parameter makes little difference, as the channel network only plays a role in
setting channel pixels to which cosmo samples will snap. This merely needs to be
set to a low enough value that ensures there are channels associated with each
cosmogenic sample.

|search_radius_nodes
|int
|1
|The number of pixels around the location of the cosmo location to search for
a channel. The appropriate setting will depend on the difference between the
accuracy of the GPS used to collect sample locations and the resolution of the DEM.
If you are using a 30 or 90m DEM, 1 pixel should be sufficient. More should be used
for LiDAR data.

|threshold_stream_order
|int
|1
|The minimum stream or which the sample snapping routine considers a 'true' channel. The input is a https://en.wikipedia.org/wiki/Strahler_number[Strahler stream order].

|theta_step
|30
|int
|Using in toposhielding calculations. This is the step of azimuth (in degrees) over which shielding and
shadowing calculations are performed. http://onlinelibrary.wiley.com/doi/10.1002/esp.1336/abstract[Codilean (2005)]
recommends 5, but it seems to work without big changes
differences with 15. An integer that must be divisible by 360 (although if not the code will force it to
the closest appropriate integer).

|phi_step
|int
|30
|Using in toposhielding calculations. This is the step of inclination (in degrees) over which shielding and
shadowing calculations are performed. http://onlinelibrary.wiley.com/doi/10.1002/esp.1336/abstract[Codilean (2005)]
recommends 5, but it seems to work without big changes
differences with 10. An integer that must be divisible by 360 (although if not the code will force it to
the closest appropriate integer).

|Muon_scaling
|string
|Braucher
|The scaling scheme for muons. Options are "Braucher", "Schaller" and "Granger". If you give
the parameter file something other than this it will default to Braucher scaling. These scalings take values
reported in http://www.ucl.ac.uk/~ucfbpve/cosmocalc/[COSMOCALC] as described by
http://onlinelibrary.wiley.com/doi/10.1029/2006GC001530/abstract[Vermeesch 2007].

|write_toposhield_raster
|bool
|true
|If true this writes a toposhielding raster if one does not exist.
Saves a bit of timebut will take up some space on your hard disk!

|write_basin_index_raster
|bool
|true
|For each DEM this writes an LSDIndexRaster to file with the extension ``_BASINS`` that
has each of the basins that have been found for CRN analysis listed by basinID.

|===

===== The cosmogenic data file

This file contains the actual cosmogenic data: it has the locations of samples,
their concentrations of cosmogenics (^10^Be and ^26^Al) and the uncertainty of these concentrations.
This must have the extension *_CRNData.csv*.

This is a ``.csv`` file: that is a comma separated value file. It is in that format to be both excel and
http://pandas.pydata.org/[pandas] friendly.

The first row is a header that names the columns,
after that there should be 7 columns (separated by commas) and unlimited rows. The seven columns are::

sample_name, sample_latitude, sample_longitude, nuclide, concentration, AMS_uncertainty, standardisation

.Important notes about *_CRNData.csv* files
************************************************
* The sample name should not start with a number or have spaces.
* The latitude and longitude should be in decimal degrees. Negative latitude indicates southern hemisphere.
* Nuclide can be either **"Be10"** or **"Al26"**. Any other option will be rejected.
* Concentration is in atoms/gram
* AMS uncertainty is also in atoms/gram
* Standardisation is the name of the standards used in the AMS measurements. This is not always so easy to find
in published papers!! The defaults are "07KNSTD" for 10Be and "KNSTD" for 26Al. These seem to be used by many
people after 2007 when http://www.ssl.berkeley.edu/cosmochem/about.html[Kuni Nishiizumi] made them available (or at least that is when he published the paper).
If the samples are from before 2007 and you don't know the standard use, you should use "KNSTD" for 10Be and 26Al.
There are many more standards floating around, but the Nishiizumi one seem the most widely used.
The options are (take a deep breath), for 10Be:
+
[source,paramfile]
----
"07KNSTD", "KNSTD", "NIST_Certified", "LLNL31000", "LLNL10000", "LLNL3000", "LLNL1000"
"LLNL300", "NIST_30000", "NIST_30200", "NIST_30300", "NIST_30600", "NIST_27900"
"S555","S2007", "BEST433", "BEST433N", "S555N", "S2007N"
----
+
And for 26Al:
[source,paramfile]
----
"KNSTD", "ZAL94", "SMAL11", "0", "ZAL94N", "ASTER", "Z92-0222"
----
************************************************

An example file would look like this (this is not real data):

[source,paramfile]
----
Sample_name,Latitude,Longitude,Nuclide,Concentration,Uncertainty,Standardisation
LC07_01,-32.986389,-71.4225,Be10,100000,2500,07KNSTD
LC07_04,-32.983528,-71.415556,Be10,150000,2300,07KNSTD
LC07_06,-32.983028,-71.415833,Al26,4000,2100,KNSTD
LC07_08,-32.941333,-71.426583,Be10,30000,1500,07KNSTD
LC07_10,-33.010139,-71.435389,Be10,140000,25000,07KNSTD
LC07_11,-31.122417,-71.576194,Be10,120502,2500,07KNSTD
----

If you followed the instructions earlier in the section <<Getting example data: The San Bernardino Mountains>>
then you will have a `CRNdata.csv` file called `Binnie_CRNData.csv` in your data folder.

===== The raster names file

This file contains names of rasters that you want to analyse.
It must have the extension *_CRNRasters.csv*.

This file is a csv file that has as many rows as you have rasters that cover your CRN data.
Each row can contain between 1 and 4 columns.

* The first column is the **FULL** path name to the Elevation raster and its prefix (that is, without the `.bil`, e.g.:
+
[source,paramfile]
----
/home/smudd/basin_data/Chile/CRN_basins/Site01/Site_lat26p0_UTM19_DEM
----
+
* The next column is **either** a full path name to a snow shielding raster **or** a snow shielding effective depth.
Both the raster and the single value should have units of g/cm^2 snow depth. If there is no number here
the default is 0.

* The next column is **either** a full path name to a self shielding raster **or** a self shielding effective depth.
Both the raster and the single value should have units of g/cm^2 shielding depth. If there is no number here
the default is 0.

* The next column is the **FULL** path to a toposhielding raster. If this is blank the code will run topographic
shielding for you. Note: topographic shielding is the rate limiting step in the cosmo analysis.
+
A typical file might will look like this:
+
[source,paramfile]
----
/home/smudd/basin_data/Site01/Site01_DEM,0,0,/home/smudd/basin_data/Site01/Site01_DEM_TopoShield
/home/smudd/basin_data/Site02/Site02_DEM,5,10
/home/smudd/basin_data/Site03/Site03_DEM,5,/home/smudd/basin_data/Site03/Site03_DEM_SelfShield
/home/smudd/basin_data/Site04/Site04_DEM,/home/smudd/basin_data/Site04/Site04_DEM_SnowShield,/home/smudd/basin_data/Site04/Site04_DEM_SelfShield
/home/smudd/basin_data/Site05/Site05_DEM
/home/smudd/basin_data/Site06/Site06_DEM,/home/smudd/basin_data/Site06/Site06_DEM_SnowShield
----
