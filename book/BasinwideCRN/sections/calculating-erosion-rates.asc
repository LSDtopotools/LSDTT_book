=== Calculating erosion rates

Okay, now you are ready to get the erosion rates.
You'll need to run the function from the directory where the compiled code is located
(in our example, `/home/LSDTT_repositories/LSDTopoTools_CRNBasinwide/`), but it can work on data in some arbitrary location.

==== Compiling the code

To compile the code, go to the driver function folder
(in the example, `/home/LSDTT_repositories/LSDTopoTools_CRNBasinwide/driver_functions_CRNBasinwide`)
and type:

[source,console]
----
$ ./Basinwide_CRN.exe pathname_of_data file_prefix
----

* The pathname_of_data is just the path to where your data is stored, in this example that is
`/home/ExampleDatasets/SanBernardino/`.
+
IMPORTANT: You *MUST* remember to put a ``/`` at the end of your pathname.
+
* The filename is the **PREFIX** of the files you need for the analysis (that is, without the extension).
In the example this prefix is `SanBern` (or `SanBern_Spawned` if you spawned separate shielding basins)

==== The output files

There are two output files. Both of these files will end up in the `pathname` that you designated when calling the program.

The first is called `file_prefix_CRNResults.csv` and the second is called `file_prefix_CRONUSInput.txt`
where file_prefix is the prefix you gave when you called the program.

So, for example, if you called the program with:

[source,console]
----
$ ./basinwide_CRN.exe /home/ExampleDatasets/SanBernardino/ SanBern
----

The outfiles will be called:

[source,console]
----
SanBern_CRNResults.csv
SanBern_CRONUSInput.txt
----

The `_CRONUSInput.txt` is formatted to be cut and pasted directly into the CRONUS calculator.
The file has some notes (which are pasted into the top of the file):

[source,paramfile]
----
->IMPORTANT nuclide concentrations are not original!
      They are scaled to the 07KNSTD!!
->Scaling is averaged over the basin for snow, self and topographic shielding.
->Snow and self shielding are considered by neutron spallation only.
->Pressure is an effective pressure that reproduces Stone scaled production
      that is calculated on a pixel by pixel basis.
->Self shielding is embedded in the shielding calculation and so
      sample thickness is set to 0.
----

The `_CRNResults.csv` is rather long.
It contains the following data in comma separated columns:

[source,paramfile]
----
      basinID     (A unique identifier for each CRN sample)
      sample_name
      nuclide     (either 10Be or 26Al)
      latitude
      longitude
      concentration (atms/g)
      concentration_uncert (atoms/g)
      erosion rate g_percm2_peryr
      erosion rate AMS_uncert g_percm2_peryr
      muon_uncert g_percm2_peryr
      production_uncert g_percm2_peryr
      total_uncert g_percm2_peryr
      AvgProdScaling dimensionless
      AverageTopoShielding dimensionless
      AverageSelfShielding dimensionless
      AverageSnowShielding dimensionless
      AverageCombinedScaling dimensionless (this is averaged production scaling times toposhielding)
      outlet_latitude
      OutletPressure hPa
      OutletEffPressure hPa (pressure needed to get basin averaged production scaling)
      centroid_latitude
      CentroidPressure hPa
      CentroidEffPressure (pressure needed to get basin averaged production scaling)
      ErosionRate_COSMOCALC_in_g_percm2_peryr (assumes 2650 kg/m^2): The erosion
          rate you would get if you took production weighted scaling and used
          cosmocalc.
      ErosionRate_COSMOCALC_mmperkyr (assumes 2650 kg/m^2): The erosion
          rate you would get if you took production weighted scaling and used
          cosmocalc.
      ErosionRate_in_mmperkyr (to check against cosmocalc, assumes 2650 kg/m^2)
      ErosionRate_totaluncertainty_in_mmperkyr
----
