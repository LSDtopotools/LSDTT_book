=== Channel extraction using the Driech method

The http://onlinelibrary.wiley.com/doi/10.1002/2013WR015167/abstract[Dreich method] 
of channel head extraction aims to find channel heads by looking at the break in the properties of topographic profiles 
that occur when fluvial incision gives way to hillslope sediment transport processes. It is different from the geometric methods described above in that it looks for a theoretical signal of fluvial incision rather than the planform curvature of the landscape.  The method you use should be chosen based on the particular aims of your study: if you are interested in extracting the valley network (all concave parts of the landscape) then you should use a geometric method, but if you are interested in extracting the fluvial channel network then you should use the Dreich method.  

The stable version of the Dreich algorithm that was released with our http://onlinelibrary.wiley.com/doi/10.1002/2013WR015167/abstract[WRR paper] is hosted on http://csdms.colorado.edu/wiki/Model:DrEICH_algorithm[CSDMS].  The version available from our GitHub repository is the newest version of the code containing some improvements over the stable version.  We have made some changes to the way that valleys are extracted from the DEM before the Dreich algorithm is run.  In our previous version we used a curvature threshold of 0.1 m^-1^ to select valleys for analysis as a pre-processing stage.  We have now changed the code so that this curvature threshold is statistically derived from the landscape in question using the same method as that of the Geonet algorithm (Passalacqua et al., 2010a, b, 2012).  After the initial valley network is extracted, the user may then select the stream order of valleys in which to run the DrEICH algorithm.

NOTE: To run the Dreich algorithm you need to have the Fast Fourier Transform Library downloaded into your folder `LSDTopoTools_ChannelExtraction`. You can download it at http://www.fftw.org/download.html. If you are using *vagrant* this will already be installed, so you can ignore this message. 

==== Extracting the network with the Driech method using the *Channel extraction tool*

. To extract a network using the DrEICH method, you need to switch on the `print_dreich_channels` option. 

. The parameter file will look something like this:
+
[source,paramfile]
----
# Parameters for channel extraction
# Comments are preceeded by the hash symbol

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doens't exist. 
read path: /LSDTopoTools/Topographic_projects/test_data
write path: /LSDTopoTools/Topographic_projects/test_data
read fname: gabilan
write fname: gabilan
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Parameters for selecting channels and basins
threshold_contributing_pixels: 1000
print_dreich_channels: true
surface_fitting_radius: 6
number_of_junctions_dreich: 1
connected_components_threshold: 100
m_over_n: 0.5


# Printing of the data
write hillshade: true
print_stream_order_raster: true
print_channels_to_csv: true
----
+
. In the above parameter file, I've used mostly defaults, with the exception of `print_dreich_channels: true`. 
+
. Save this parameter file in the directory with the data (i.e., in `/LSDTopoTools/Topographic_projects/test_data`). Call it something sensible. 

. Now got into the directory with the *chi mapping tool* (i.e., `/LSDTopoTools/Git_projects/LSDTopoTools_ChannelExtraction/driver_functions_ChannelExtraction`) and run:
+
[source,console]
----
$ ./chi_mapping_tool.exe /LSDTopoTools/Topographic_projects/test_data NAME_OF_PARAMFILE.driver
----
+
. This should print out both a raster of stream orders and a hillshade raster, and in addition a `csv` file with channel nodes. If you import this `csv` into a GIS you should select the coordinate system http://spatialreference.org/ref/epsg/wgs-84/[WGS84].


==== Channel extraction using the Dreich method (the old way)

.*Important Warning*
*****************************************
This describes our original way of doig things, but now you should use the *channel extraction tool*
Read about that here: <<The Channel Extraction tool>>.
*****************************************



===== Run the chi analysis

Before the Dreich algorithm can be run the _m/n_ value for the landscape must be determined.  This can be done using the <<Chi analysis>> in LSDTopoTools.

===== Compile the code

We can extract threshold area channel networks using the driver function called `channel_extraction_dreich.cpp`.  To compile the code you first need to navigate to the driver functions folder in the repository.  When in this folder type the following to compile the driver:

[source,console]
----
$ make -f channel_extraction_dreich.make
----

This will create a program called `channel_extraction_dreich.out`

===== Run the analysis

We first need to create a parameter file similar to that for the <<Basic channel extraction using thresholds>>. To create your parameter file, open any text editor and create a file with the following lines:

[source,paramfile]
----
Path and file name of the DEM without extension
Path and output name prefix for your files
Window radius for filtering the DEM
Threshold area for initial channel network (should be 1000)
Connected components threshold for initial valley network (should be 100)
A_0 for chi analysis (should be 1000)
m/n value for landscape (calculate using Chi analysis tools)
Number of tributary junctions downstream of valley head to run DrEICH algorithm on (set to 1 for whole valley network)
----

You need to save this parameter file in the folder `LSDTopoTools_ChannelExtraction` (one folder above the driver functions folder).  For the Indian Creek site we can create a parameter file called `indian_creek_dreich.driver` with the following lines:

[source,paramfile]
----
RasterFile /home/LSDTT_repositories/LSDTopoTools_ChannelExtraction/indian_creek
OutputRasterFile /home/LSDTT_repositories/LSDTopoTools_ChannelExtraction/indian_creek
window_radius_for_surface_fitting 6
threshold_drainage_area 1000
connected_components_threshold 100
A_0 1000
m_over_n 0.437
number_of_junctions_dreich 1
----

After creating the parameter file we can then run the code using the following command:

[source,console]
----
$ ./channel_extraction_dreich.out /path_to_repository_folder/ param_file_name
----

For our Indian Creek example our command would be:

[source,console]
----
$ ./channel_extraction_dreich.out /home/LSDTT_repositories/LSDTopoTools_ChannelExtraction/ indian_creek_dreich.driver
----

Once this program has run, it will create several files with the extracted channel network.  These include:

** A `bil` file with the valley network with Strahler stream ordering e.g. `indian_Creek_SO_valley.bil`
** A CSV file with the channel heads e.g. `indian_creek_CH_DrEICH_nodeindices_for_arc.csv`
** A `bil` file with the channel heads e.g. `indian_creek_CH_DrEICH.bil`
** A `bil` file with the stream network with Strahler stream ordering e.g. `indian_creek_SO_DrEICH.bil`

The figure below shows the extracted channel network using the DrEICH algorithm for the Indian Creek field site.

.Map of Indian Creek with channel network extracted from DrEICH algorithm
image::images/ind_so_dreich.png[Map of Indian Creek with channel network extracted from DrEICH algorithm]