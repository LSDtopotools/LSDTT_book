=== Get the code for channel extraction

Our code for channel extraction can be found in our https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction[GitHub repository].  This repository contains code for extracting channel networks using a variety of different methods ranging from simple contributing area thresholds to more complex geometric and theoretical approaches for extracting channels from high-resolution datasets.

.If you use our vagrantfiles
*************************************
If you use our https://github.com/LSDtopotools/LSDTT_vagrantfiles[vagrantfiles] to set up your system, the channel extraction repository will already be downloaded onto your virtual machine.
You can find the repository in the directory `/LSDTopoTools/Git_projects/LSDTopoTools_ChannelExtraction/` directory. You can use `cd` to go directly there. 
*************************************

==== Compile channel extraction using LSDTopoToolsSetup.py
*******************************************
https://github.com/LSDtopotools/LSDAutomation/blob/master/LSDTopoToolsSetup.py[LSDTopoToolsSetup.py] is a script that we use to automate compilation of our tools. It is downloaded automatically by the vagrant machine into the `/LSDTopoTools/` folder.  

To compile the channel extraction tool run:
[source,console]
----
$ cd /LSDTopoTools/
$ python LSDTopoToolsSetup.py -id 1 -CE True
----
*******************************************


==== Clone the GitHub repository (not needed if you used LSDTopoToolsSetup.py)

If you haven't run our vagrant setup, you need to clone the repository. First navigate to the folder where you will keep the GitHub repository.  In this example it is called `/LSDTopoTools/Git_projects/`.  To navigate to this folder in a UNIX terminal use the `cd` command:

[source,console]
----
$ cd /LSDTopoTools/Git_projects/
----

You can use the command `pwd` to check you are in the right folder.  Once you are in this folder, you can clone the repository from the https://github.com[GitHub website]:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ git clone https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction.git
----
Navigate to this folder again using the `cd` command:

[source,console]
----
$ cd LSDTopoTools_ChannelExtraction/
----

==== Alternatively, get the zipped code (not needed if you used LSDTopoToolsSetup.py)

If you don't want to use _git_, you can download a zipped version of the code:

[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/
$ wget https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction/archive/master.zip
$ gunzip master.zip
----

NOTE: https://github.com[GitHub] zips all repositories into a file called `master.zip`,
so if you previously downloaded a zipper repository this will overwrite it.

==== Example datasets 
We have provided some example datasets which you can use in order to test the channel extraction algorithms. In this tutorial we will work using a lidar dataset from Indian Creek, Ohio. 

.If you are using a Vagrant server
[source,console]
----
$ cd /LSDTopoTools/Topographic_projects/Test_data
----

The DEM is called `indian_creek.bil` and `indian_creek.hdr`, and the relevant parameter file is `Vagrant_ChannelExtraction.driver`.

This dataset is already in the preferred format for use with LSDTopoTools (the ENVI `bil` format). The figure below shows a shaded relief map of part of the Indian Creek DEM which will be used in these examples.

.Shaded relief image of Indian Creek catchment, Ohio USA, UTM Zone 17N
image::images/ind_map.png[Shaded relief map of Indian Creek]

NOTE: You can also work with the DEM `gabilan.bil` that is included by default in the `/LSDTopoTools/Topographic_projects/Test_data` folder but you will need tochange the parameter files to reflect the different DEM name.

