=== The Channel Extraction tool

Our channel extraction tool bundles four methods of channel extraction. These are:

* A rudimentary extraction using a drainage area threshold.
* The http://onlinelibrary.wiley.com/doi/10.1002/2013WR015167/abstract[Dreich method (Clubb et al., 2014)].
* The http://onlinelibrary.wiley.com/doi/10.1029/2012WR012452/abstract[Pelletier (2013) method].
* A geometric method combining elements of https://sites.google.com/site/geonethome/home[the Geonet website[Geonet (Passalacqua et al., 2010)] and http://onlinelibrary.wiley.com/doi/10.1029/2012WR012452/abstract[Pelletier (2013)] methods that we developed for http://www.earth-surf-dynam.net/4/627/2016/esurf-4-627-2016.html[Grieve et al. (2016)] and http://onlinelibrary.wiley.com/doi/10.1002/2015JF003747/full[Clubb et al. (2016)] We call this the "Wiener" method (after the https://en.wikipedia.org/wiki/Wiener_filter[wiener filter] used to preprocess the data).

These methods are run based on a common interface via the program `channel_extraction_tool.exe`. 

=== Running channel extraction with a parameterfile

We assume you have compiled the channel extraction tool (if not, go back <<Get the code for channel extraction,here>>).

Like most of *LSDTopoTools*, you run this program by directing it to a parameter file. The parameter file has a series of keywords. Our convention is to place the parameter file in the same directory as your data. 

==== Channel extraction options
The parameter file has keywords followed by a value. The format of this file is similar to the files used in the `LSDTT_analysis_from_paramfile` program, which you can read about in the section <<Running your first analysis>>.

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

The parameter file has keywords followed by the `:` character. After that there is a space and the value. 

.Channel extraction parameter file format
************************************************
. Lines beginning with `#` are comments.
. Keywords or phrases are followed by a colon (`:`).
. The order of the keywords do not matter.
. Keywords are not sensitive, but must match expected keywords.
. If a keyword is not found, a default value is assigned.
************************************************


Below are options for the parameter files. Note that all DEMs must be in ENVI `bil` format (**DO NOT** use ArcMap's bil format: these are two different things. See the section <<What data does LSDTopoToolbox take?>> if you want more details). 
The reason we use `bil` format is because it retains georeferencing which is essential to our file output since many of the files output to `csv` format with latitude and longitude as coordinates. 


[cols="1,1,2", options="header"]
.File input and output options. **These do not have defaults and MUST be declared**.
|===
|Keyword
|Input type
|Description

|write path
|string
|The path to which data is written. **The code will NOT create a path: you need to make the write path before you start running the program.**

|read path
|string
|The path from which data is read.

|write fname
|string
|The prefix of rasters to be written *without extension*.
For example if this is `Test` and you have selected `bil` format then a fill operation will result in a file called `Test_Fill.bil`.

|read fname
|string
|The filename of the raster to be read without extension. For example if the raster is `MyRaster.bil`, read fname will be `MyRaster`.


|channel heads fname
|string
|The filename of a channel heads file. You can import channel heads. If this is set to `NULL` then the channels will be calculated using a pixel threshold. 



|===

[cols="1,1,1,3", options="header"]
.Options for what analysis to do.
|===
|Keyword
|Input type
|Default value
|Description


|print_area_threshold_channels
|bool
|true
|Calculate channels based on an area threshold. 

|print_dreich_channels
|bool
|false
|Calculate channels based on the dreich algorithm. 

|print_pelletier_channels
|bool
|false
|Calculate channels based on the pelletier algorithm. 

|print_wiener_channels
|bool
|false
|Calculate channels based on our wiener algorithm. 

|===

[cols="1,1,1,3", options="header"]
.Options for what files to output
|===
|Keyword
|Input type
|Default value
|Description


|print_stream_order_raster
|bool
|false
|Prints a raster with channels indicated by their strahler order and nodata elsewhere. File includes "_SO" in the filename. 

|print_channels_to_csv
|bool
|true
|Prints a csv file with the channels, their channel pixel locations indicated with latitude and longitude in WGS84.

|print_sources_to_raster
|bool
|false
|Prints a raster with source pixels indicated. 

|print_sources_to_csv
|bool
|true
|Prints a csv file with the sources, their locations indicated with latitude and longitude in WGS84. 

|print_fill_raster
|bool
|false
|Prints the fill raster

|write hillshade
|bool
|false
|Prints the hillshade raster to file (with "_hs" in the filename).

|print_wiener_filtered_raster
|bool
|false
|Prints the raster after being filter5ed by the wiener filter to file. 

|print_curvature_raster
|bool
|false
|Prints two rasters of tangential curvature. One is short and one long wave (has "_LW" in name) curvature. 

|===


[cols="1,1,1,2", options="header"]
.Parameters for extracting the channel network
|===
|Keyword
|Input type
|Default value
|Description

|min_slope_for_fill
|float
|0.0001
|Minimum slope between pixels used by the filling algorithm.

|surface_fitting_radius
|float
|6
|Radius of the polyfit window over which to calculate slope and curvature. 

|curvature_threshold
|float
|0.01
|Threshold curvature for channel extraction. Used by Pelletier (2013) algorithm.  


|minimum_drainage_area
|float
|400
|Used by Pelletier (2013) algorithm as the minimum drainage area to define a channel. In m^2^ 


|pruning_drainage_area
|float
|1000
|Used by the wiener and driech methods to prune the drainage network. In m^2^

|threshold_contributing_pixels
|int
|1000
|Used to establish an initial test network, and also used to create final network by the area threshold method. 

|connected_components_threshold
|int
|100
|Minimum number of connected pixels to create a channel. 

|A_0
|float
|1
|The *A~0~* parameter (which nondimensionalises area) for chi analysis. This is in m^2^. Used by Dreich.

|m_over_n
|float
|0.5
|The *m/n* paramater (sometimes known as the concavity index) for calculating chi. Used only by Dreich. 

|number_of_junctions_dreich
|int
|1
|Number of tributary junctions downstream of valley head on which to run DrEICH algorithm.

|===



==== Example channel extraction parameter file

Below is an exaple parameter file. This file is included in the repository along with the driver functions. 
[source,paramfile]
----
# Parameters for channel extraction
# Comments are preceeded by the hash symbol
# Documentation can be found here: 
# TBA

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doens't exist. 
read path: /LSDTopoTools/Topographic_projects/test_data
write path: /LSDTopoTools/Topographic_projects/test_data
read fname: gabilan
write fname: gabilan
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Parameters for selecting channels and basins

# threshold_contributing_pixels: 2500
print_area_threshold_channels: false
print_wiener_channels: false
print_pelletier_channels: false
print_dreich_channels: true

# write hillshade: true
print_stream_order_raster: true

----