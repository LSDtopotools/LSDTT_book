== Channel extraction

Landscapes are almost always dissected by a network of channels,
and extracting channel networks from topographic data is a common yet frequently challenging task in topographic analysis.  We have a variety of different channel network extraction algorithms that can be used depending on the characteristics of the landscape to be studied (such as the relief and presence of artifical features), or the resolution of the available digital elevation models (DEMs).
In this chapter we go through the many methods of channel extraction available within https://lsdtopotools.github.io/[LSDTopoTools], 
ranging from rudimentary methods (e.g., <<Basic channel extraction using thresholds>>)
to methods that aim to precicely locate channel heads from high resolution data.

.Quick guide if you already know what you are doing
*****************************************************************************

Here is a quick overview of how to set up and run the code, if you have done it before:

. You can set up **LSDTopoTools** by following these instructions: <<Installing LSDTopoTools using VirtualBox and Vagrant>>. Note that our vagrant setup also works on MacOS and Linux systems. If you follow those instructions you will have the channel extraction repository on your LSDTopoTools system. 
. If you have used vagrant, navigate to `/LSDTopoTools/Git_projects/LSDTopoTools_ChannelExtraction/driver_functions_ChannelExtraction/`. 
. If you have not used vagrant, clone the repository using `git clone https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction.git`. 
. Choose the channel extraction method that you would like to use, and use `make` to compile it. 
. Make sure your DEM is in `bil` format. This is the **ENVI** bil format and not the Arc bil format. If you need to read about converting data read this section: <<Translating your raster into something that can be used by LSDTopoToolbox>>
. Create a parameter file for your DEM, put it in your data folder.
. Compile the code using `make -f channel_extraction_TypeOfExtraction.make`, where `TypeOfExtraction` is the extraction method you want to use (either area_threshold, pelletier, geonet, or dreich).
. Run the program with `./channel_extraction_TypeOfExtraction.out /path_to_data_folder/ parameter_file.driver`
. Open the resulting `bil` and CSV files in the GIS of your choice.
*****************************************************************************

include::sections/channel-extraction-get-the-code.asc[]

include::sections/threshold-channel-extraction.asc[]

include::sections/geometry-based-methods.asc[]

include::sections/dreich-method.asc[]


=== Summary

By now you should be able to extract channel networks using a variety of methods. For coarse-resolution DEMs you can extract the channel network using a simple area threshold, although the choice of threshold must be carefully considered. For higher-resolution DEMs you can use either a geometric method (if you are interested in extracting the valley network), or a process-based method such as the DrEICH algorithm (if you are interested in the fluvial domain).  These methods all require a certain number of user-defined parameters, so the user should take care to select these carefully as their value may impact the resulting channel network.
