=== Chi analysis, part 1: getting the channel profiles

IMPORTANT: This section describes the steps in running analyses described in http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/full[Mudd et al. (2014)]. These are mainly aimed at constraining the stem:[m/n] ratio in various landscapes. If you want to capture the steepness of all channels in a landscape you should go to the section: <<Chi analysis part 3: Getting chi gradients for the entire landscape>>.

Our chi analysis method involves two steps.
The first extracts a channel profile
from a DEM. This processes is separated from the rest of the chi analysis for
memory management reasons:
these steps involve a DEM but once they are completed
chi analysis can proceed with much smaller `.chan` files


.Quick guide
************************************************
If you already know more or less what you are doing, but need a quick reminder, here are the steps involved:

. Download your DEM.
. Project it into a projected coordinate system (we usually use UTM).
. Export the DEM in `.flt` or `.bil` format. See the section on <<gdal-notes-top,using GDAL>> .
. If the programs aren't complied, make them with: chi_step1_write_junctions.make and chi_step2_write_channel_file.make
. Run the program `chi1_write_junctions.exe` on your DEM.
. Import the junction raster (`*.JI.flt`) into a GIS and pick a junction
   (this is easiest if you also import the stream order (`*_SO.flt`) and hillshade (``*_HS.flt``).
. Run `chi2_write_channel_file.exe`  to get the `.chan` file.
   Once you do this you are ready to move on to section two: running the chi analysis!
************************************************

==== Overview

In this section we will extract a channel network,
and from this channel network we will choose a junction (or junctions)
from which we will run chi analyses.
Later in this chapter we will go over tools for running chi analysis across all the channels in a basin.

==== Running the channel network extraction

The channel extraction code requires two steps.
In the first step,
the toolkit takes the raw DEM and prints several derived datasets from it.
The main dataset used for the next step is the junction index dataset.
The second step involves selecting a junction from which the chi analysis proceeds.

===== Compiling the source code for junctions and channels

. This example will use the files that we downloaded in the previous section (or our *vagrantfile* downloaded automatically). 
If you have your own files, you will need to substitites the correct file and directory names. 
+
. Make sure the necessary DEM is in your data directory:
+
[source,console]
----
$ pwd
/LSDTopoTools/Topographic_projects/Test_data

$ ls
gabilan.bil          Mandakini.hdr  Mandakini.bil
gabilan.hdr          WA.bil         WA.hdr
----
+
These files are downloaded automatically by our vagrantfile. If you did previous examples you will have some additional files there. 
+
. You should also copy over the example driver file into this directory. The example driver comes with the `LSDTopoTools_ChiMudd2014` repository: it is in the `driver_functions_MuddChi2014` directory. You can move it to your data directory in either windows or in Linux using the command:
+
[source,console]
----
$ pwd
/LSDTopoTools/Topographic_projects/Test_data
$ cp /LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014 Example_Mudd2014.driver
----
+
NOTE: The above command only works if you are in the Test_data folder. If not, you need to tell the `cp` command where to put the copied file. 
+
. The driver file must contain three lines.
The first line is the name of the DEM without the extension.
In this example the name is `Mandakini`. The next line is a minimum slope for the fill function.
The default is 0.0001.
The third line is the threshold number of pixels that contribute to another pixel before that pixel is considered a channel.
You can play with these numbers a bit, in this example, I have set the threshold to 300
(it is a 90m DEM so in the example the threshold drainage area is 2.5x10^6^ m^2^).
Here are the first 3 lines of the file:
+
[source,paramfile]
----
mandakini
0.0001
300
----
+
You can check this in Linux with the `less` command. Just type `less Mandakini.drver` to see the file and `q` to quit. 
+
. Okay, if you have been following along, you should have two terminal windows open. One should be open in the folder containing your data, and the other should be open in the folder with the source code driver functions. 
+
[cols="1,1", options="header"]
.The two terminal windows
|===
|Data terminal window
|Source code terminal window

a|[source,paramfile]
----
$ pwd
/home/LSDTT_data/India/
$ ls
Example_Mudd2014.driver  Mandakini.bil  Mandakini.hdr  <other stuff as well>
----

a|
[source,paramfile]
----
$ pwd
/LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014/
$ ls
chi_get_profiles_driver.cpp
chi_get_profiles.make
chi_m_over_n_analysis_driver.cpp
chi_m_over_n_analysis.make
chi_step1_write_junctions_driver.cpp
chi_step1_write_junctions.make
chi_step2_write_channel_file_discharge.cpp
chi_step2_write_channel_file_discharge.make
chi_step2_write_channel_file_driver.cpp
chi_step2_write_channel_file.make
<other stuff as well>
----

|===
+
. In the source code terminal window, you need to compile two programs (step1 and step2):
+
[source,console]
----
$ make -f chi_step1_write_junctions.make
<<Lots of warnings that you can ignore>>
$ make -f chi_step2_write_channel_file.make
----
+
. This will make two programs, *chi1_write_junctions.exe* and *chi2_write_channel_file.exe*. 
Once you have done this, you need to run the driver program.

===== Writing junctions

. For writing junctions, the driver program is called `chi1_write_junctions.exe`.
It takes 2 arguments.
The first is the path name into the folder where your data is stored, and the second is the name of the driver file.
To run the program, just type the program name and then the path name and driver file name.
+
WARNING: **The path has to end with a '`/`' symbol**.
+
If you are working in Linux, then the program name should be proceeded with a ```./``` symbol.
Here is a typical example:
+
[source,console]
----
$ ./chi1_write_junctions.exe /LSDTopoTools/Topographic_projects/Test_data Example_Mudd2014.driver
----
+
IMPORTANT: To run the code you need to be in the source code folder containing the `.exe` file, **NOT** the folder with the data.
+
All the output from the software, however, will be printed to the data folder. *That is, the software and data are kept separately.*
+
. In later sections you will see that the driver file has the same format for all steps,
but for this step only the first three lines are read.
The driver file has a bunch of parameters that are described later but there is a file in the distribution called ``Driver_cheat_sheet.txt``
that has the details of the parameter values.

. This is going to churn away for a little while.
If you have used incorrect filenames the code should tell you.
The end result will be a large number of new files: The code prints
+
[cols="1,4", options="header"]
.Files generated by chi1_write_junctions.exe. 
|===
|File name contains
|Description

|`_fill`
|A filled DEM.

|`_HS`
|A hillshade raster.

|`_SO`
|A raster containing the stream orders of the channels.
Pixels that are not streams will have noData.

|`_JI`
|A raster containing the junction numbers.
You can use a GIS to inspect the junction numbers.
In the next step these numbers will be used to generate channels for analysis. 

|===
+
NOTE: Note that for `flt` and `bil` formats each dataset will consist of a `bil` and a `hdr` file.  
+
So your directory will be full of files like this:
+
[source,console]
----
$ ls
Mandakini.hdr         Mandakini.driver
Mandakini.bil         Mandakini_HS.bil  
Mandakini_CP.bil      Mandakini_HS.hdr  
Mandakini_CP.hdr      Mandakini_JI.bil  
Mandakini_JI.hdr  
Mandakini_fill.bil    Mandakini_SO.bil  
Mandakini_fill.hdr    Mandakini_SO.hdr
<and some other stuff>
----
+
. You can load these files into GIS software to look at them, such as http://desktop.arcgis.com/en/arcmap/[Arcmap].
Alternative to ArcMap is http://www.uoguelph.ca/~hydrogeo/Whitebox/[Whitebox] which has the advantage of being open source.
http://www.qgis.org/en/site/[QGIS] is another good open source alternative to ArcMap.
+
. You want to look at the channel network and junctions.
So at a minimum you should import
+
* the hillshade raster
* the stream order raster (`_SO` in filename) and
* the junction index raster (`_JI` in filename)
+
into your preferred GIS.
+
The stream order raster will display the channel network, with each channel having a stream order.
*The junction index file is the key file, you will need information from this file for the next step.*
In the image below, the channel network is in cool colours and the junctions are in warm colours.
Each junction has a unique integer value, called the junction index.
+
.Stream network, with junctions in red and orange pixels
image::images/Mandakini_stream_network.jpg[Stream network]
+
. Now, find the part of the map where you want to do the chi analysis.
You need to choose the junction at the downstream end of the channels where you will do your analysis.
Use the identify tool (it looks like an ```i``` in a blue circle on ArcMap)
to get the number of the junction that you want to use as the lowest junction in the channel network.
In the below image the arrow points to junction number 51.
+
.Finding the junction number
image::images/Mandakini_select_junction.jpg[Finding a junction]
+
. Each junction has one and only one receiver junction, whereas it can have multiple donor junctions.
When you choose a junction, the extracted channel traces down to the node one before the receiver junction.
It then traces up the channel network, following the path that leads to the node the furthest flow
distance from the outlet junction. That is, when junctions are reached as the algorithm moves upstream
the upstream channel is determined by flow distance not drainage area. Below we show an image of this.

===== Extracting the `.chan` file

. Now that you have the junction number, you need to run the second program.
Before you run this program, you need to write a file that contains the parameters for the chi analysis.

. **The first 3 lines of this file MUST be the same as the driver file in step 1.**
The code does not check this so you need to make sure on your own this is the case.

. The next two rows of the driver file are the junction number from which you want to extract the network.
and something that controls how the channel network is "pruned".
This is the ratio in area between the main stem and a tributary that must be exceeded for a tributary to be included in the analysis.
If this number is 1 you only get the main stem.
The smaller the number the more tributaries you get. A reasonable number seems to be `~0.02`.
Here is an example file:
+
[source,paramfile]
----
Mandakini
0.0001
300
76
0.01
----
+
. There can be more information in the driver file (for example, parameters for a chi analysis),
but the channel network extraction program will ignore these;
it only looks at the first 5 lines of the driver function.
+
. From here you run the program `chi2_write_channel_file.exe`.
You need to include the path name and the name of the chi parameter file.
In Linux the program should be proceeded with `./`. Here is an example:
+
[source,console]
----
./chi2_write_channel_file.exe /LSDTopoTools/Topographic_projects/Test_data Example_Mudd2014.driver
----
+
. This will generate several files
+
[cols="1,4", options="header"]
.Files generated by chi2_write_channel_file.exe.
Note that for `flt` and `bil` formats each dataset will consist of a `bil` and a `hdr` file.  
|===
|File name contains
|Description

|`_basin_`
|Immediately before the `.flt` extension the junction number will also be listed.
This file is a raster containing the outline of the contributing pixels to the basin
drained by the extracted channel network.

|`_ChanNet_`, with extension `chan`
|A hillshade raster. After `_ChanNet_` the basin number will be printed. 
This file is used by subsequent chi analysis: that is, further analysis does not involve the DEM, 
all of the necessary information is translated into the `.chan` file. 

|.csv
This file can be imported into ArcMap or other GIS software.
|This file contain data on the nodes making up the channels in the `chan` file, 
but the csv file can be imported into ArcMap or QGIS. 

|===
+
ArcMap should be able to see the '.csv' file.
+
.Adding a csv file in ArcMap
image::images/channel_csv.jpg[Load a csv file]
+
If you load this layer and right click on it, you should be able to load the xy data
+
.Showing x and y data in ArcMap
image::images/csv_show_xy.jpg[Show xy data in ArcMap]
+
Loading the csv file will give you a shapefile with the channel nodes, and loading the `_basin_`
file will give you the basin. Here is the basin and the channel for junction `51` of the
Mandakini dataset
+
.The extraced basin with its channels
image::images/Mandakini_extracted_chan_and_basin.jpg[Channel and basin]
+
Note how the channel extends downstream from the selected junction. It stops one node before the
next junction. This way you can get an entire tributary basin that stops one node short of its
confluence with the main stem channel.


===== Format of the .chan file

The segment fitting algorithm (see part 2)  works on a "channel" file (we use the extension `.chan` to denote a channel file).
The channel file starts with six lines of header information that is used to reference the channel to a DEM.
f the channel is not generated from a DEM these six rows can contain placeholder values.
The six rows are:

[cols="1,3", options="header"]
.First six rows of the .chan file.
|===
|Keyword
|Description

|Nrows
|number of rows

|Ncols
|number of columns

|Xllcorner
|location in the x coordinate of the lower left corner

|Yllcorner
|location in the y coordinate of the lower left corner

|Node_spacing
|the spacing of nodes in the DEM

|NoDataVal
|the value used to indicate no data
|===

This header information is not used in the segment analysis;
it is only preserved for channel data to have some spatial reference so that
scripts can be written to merge data from the channel files with DEM data.

The rest of the channel file consists of rows with 9 columns.

[cols="1,1,3", options="header"]
.Chan file contents, the first 6 rows are listed in the table above. 
|===
|Column number
|paramter name
|Description

|1
|Channel number
|We use pass:[C++] style zero indexing so the main stem has channel number 0

|2
|Channel number of reciever channel
|The reciever channel is the channel into which this channel flows. 
The mainstem channel flows into itself, and currently the code can only handle simple geometries
where tributaries flow into the main stem channel only, so this column is always 0.

|3
|node number on the receiver channel
|This is the node of the reciever channel into which the tributary flows. 
Currently the reciever channel must be the main stem (channel 0).
The main stem is defined to flow into itself.
Suppose the main stem has 75 nodes.
The third column would then be 74 for the main stem (because of zero indexing: the first node in the main stem channel is node 0.
Nodes are organized from upstream down, so the most upstream node in the main stem channel is node zero.
Suppose tributary 1 entered the main stem on the 65th node of the main stem.
The third column for tributary 1 would be 64 (again, due to 0 indexing).

|4
|node index on reciever channel
|This is the node index (generated by the *LSDFlowInfo* object)
of the point on the reciever channel into which this channel flows. 

|5
|row
|Row in a DEM the node occupies.

|6
|column
|Column in a DEM the node occupies.

|7
|Flow distance (metres)
|The flow distance from the outlet of the node. It should be in metres.

|8
|elevation (m)
|Elevation of the node. It should be in meters.

|9
|Drainage area (m^2^)
|The drainage area of the node.
It will be in the square of the spatial units of the DEM; 
if you have projected into UTM coordinates these will be in metres.   

|===
+
Many of these columns are not used in the analysis but are there to allow the user to refer the channel file back to a DEM.
Columns are separated by spaces so rows will have the format:

[source,console]
----
Chan_number receiver_chan receiver_node node_index row col flow_dist elev drainage_area
----

Here are the first few lines of the example file (`Mandakini_ChanNet_76.chan`):

[source,paramfile]
----
648
587
290249.625
3352521.75
88.81413269
-9999
0 0 127 11457 100 223 73914.84375  4379 2382161
0 0 127 11781 101 224 73789.24219  4370 2626687.5
0 0 127 12107 102 225 73663.64062  4364.006348 2745006.75
0 0 127 12434 103 226 73538.03906  4364 2760782.5
0 0 127 12763 104 227 73412.4375  4334 2768670.5
0 0 127 12764 104 228 73323.625  4302 2910653.5
0 0 127 12765 104 229 73234.8125  4293 2989533
----

Now that you have the `.chan` file you are ready to move to the next section of the chi analysis:
<<Chi profile analysis, part 2: constraining m/n and transforming profiles>>.
This may have seen like quite a few steps, but once you get familiar with the workflow the
entire process should take no more than a few minutes.

The program also prints a file in csv format that can be imported into GIS software. You will need to set the coordinate system to match that of the DEM. 
