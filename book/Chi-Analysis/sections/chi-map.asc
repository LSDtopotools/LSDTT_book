=== Chi analysis part 3: Getting chi gradients for the entire landscape

The algorithms in the previous two sections were designed for users to statistically determine the stem:[m/n] ratio of a given landscape. 
The routines calculate the gradient in chi space (which we call stem:[M_{\chi}]) but they focus on the main stem
(which in our code is calculated with the longest channel) and its biggest tributaries. 

In many applications, however, users may with to map the chi gradient across a landscape. We provide a tool for doing so in the driver function 'map_chi_gradient.cpp'. 

==== Compile the code

The chi gradient mapping tool can be compiled by navigating to the driver function folder and running `make`. If you are using our vagrant setup you can go directly to the correct folder by typing `cd /LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014/`. Once there, run the command:

[source,console]
-----
$ make -f chi_mapping_tool.make
-----

==== Run the map chi gradient tool

The program is now ready to run with the correct inputs. The function takes two inputs

1. The path to the parameter file. This **MUST** inclde the trailing slash (i.e., `/LSDTopoTools/Topographic_projects/Test_data` is incorrect whereas `/LSDTopoTools/Topographic_projects/Test_data/` is correct).
2. The name of the parameter file.

So if the parameter file is located at `/LSDTopoTools/Topographic_projects/Test_data` and it is called `test_chi_map.param`, you run the program with:

[source,console]
-----
$ ./chi_mapping_tool.exe /LSDTopoTools/Topographic_projects/Test_data test_chi_map.param 
-----

As we will see momentarily, the data an the parameter file can be in different locations, although in general it might be sensible to place the parameter file in the sample directory as the data.

The code is run using a parameter file, within which users can set the data they want to print to file. Regardless of which data they choose to print to file, a file will be printed with the extension `_Input.param` which prints out all the parameters used in the analysis (including the default parameters). This file can be used to verify if the correct parameters have been used in the analysis. 

==== The parameter file

The parameter file has keywords followed by a value. The format of this file is similar to the files used in the `LSDTT_analysis_from_paramfile` program, which you can read about in the section <<Running your first analysis>>.

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

The parameter file has keywords followed by the `:` character. After that there is a space and the value. 

.Chi mapping parameter file format
************************************************
. Lines beginning with `#` are comments.
. Keywords or phrases are followed by a colon (`:`).
. The order of the keywords do not matter.
. Keywords are not sensitive, but must match expected keywords.
. If a keyword is not found, a default value is assigned.
************************************************


==== Parameter file options

Below are options for the parameter files. Note that all DEMs must be in ENVI `bil` format (**DO NOT** use ArcMap's bil format: these are two different things. See the section <<What data does LSDTopoToolbox take?>> if you want more details). 
The reason we use `bil` format is because it retains georeferencing which is essential to our file output since many of the files output to `csv` format with latitude and longitude as coordinates. 


[cols="1,1,2", options="header"]
.File input and output options. **These do not have defaults and MUST be declared**.
|===
|Keyword
|Input type
|Description

|write path
|string
|The path to which data is written. **The code will NOT create a path: you need to make the write path before you start running the program.**

|read path
|string
|The path from which data is read.

|write fname
|string
|The prefix of rasters to be written *without extension*.
For example if this is `Test` and you have selected `bil` format then a fill operation will result in a file called `Test_Fill.bil`.

|read fname
|string
|The filename of the raster to be read without extension. For example if the raster is `MyRaster.bil`, read fname will be `MyRaster`.


|channel heads fname
|string
|The filename of a channel heads file. You can import channel heads. If this is set to `NULL` then the channels will be calculated using a pixel threshold. 



|===

[cols="1,1,1,3", options="header"]
.Options for determining which channels and basins to analyse, including settings for the fill function.
|===
|Keyword
|Input type
|Default value
|Description


|min_slope_for_fill
|float
|0.001
|The minimum slope between pixels for use in the fill function. 

|threshold_contributing_pixels
|int
|1000
|The number of pixes required to generate a channel (i.e., the source threshold).

|minimum_basin_size_pixels
|int
|1000
|The minimum number of pixels in a basin for it to be retained. This operation works on the baselevel basins: subbasins within a large basin are retained. 

|test_drainage_boundaries
|bool (true or 1 will work)
|false
|A boolean that, if set to true, will eliminate basins with pixels drainage from the edge. This is to get rid of basins that may be truncated in a DEM (and thus will have incorrect chi values). 

|only_take_largest_basin
|bool (true or 1 will work) 
|true
|If this is true, a chi map is created based only upon the largest basin in the raster. 

|===

[cols="1,1,1,2", options="header"]
.Parameters for calculating the chi coordinate.
|===
|Keyword
|Input type
|Default value
|Description

|A_0
|float
|1000
|The *A~0~* parameter (which nondimensionalises area) for chi analysis. This is in m^2^.

|m_over_n
|float
|0.5
|The *m/n* paramater (sometimes known as the concavity index) for calculating chi. 

|threshold_pixels_for_chi
|int
|1000
|The number of contributing pixels above which chi will be calculated. The reason for the threshold is to produce chi plots that do not extend onto hillslopes; this helps visualisation of chi differences between nearby headwater channels. 

|===

[cols="1,1,1,2", options="header"]
.Parameters for calculating the segments of similar chi slope (stem:[M_{\chi}]). More details on the use fo these parameters can be found in http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/abstract[Mudd et al., JGR-ES 2014].
|===
|Keyword
|Input type
|Default value
|Description

|n_iterations
|int
|20
|The number of iterterations of random sampling of the data to construct segments. The sampling probability of individual nodes is determined by the skip parameter. 

|target_nodes
|int
|80
|The number of nodes in a segment finding routine. Channels are broken into subdomains of aroung this length and then segmenting occurs on these subdomains. 

|minimum_segment_length
|int
|10
|The minimum length of a segment in sampled data nodes. The actual length is approxamately this parameter times (1+skip).  

|skip
|int
|2
|During Monte Carlo sampling of the channel network, nodes are sampled by skipping nodes after a sampled node. The skip value is the mean number of skipped nodes after each sampled node. For example, if skip = 1, on average every other node will be sampled. Skip of 0 means every node is sampled (in which case the n_iterations should be set to 1, because there will be no variation in the fit between iterations).

|sigma
|float
|10.0
|This represents the variability in elevation data (if the DEM has elevation in metres, then this parameter will be in metres). It should include both uncertainty in the elevation data as well as the geomorphic variability: the size of roughness elements, steps, boulders etc in the channel that may lead to a channel profile diverging from a smooth long profile. 

|basic_Mchi_regression_nodes
|int
|11
|This works with the basic chi map: segments are not calculated. Instead, a moving window, with a length set by this parameter, is moved over the channel nodes to calculate the chi slope. This method is very similar to methods used to calculate normalised channel steepness (*k~sn~*).
|===

[cols="1,3", options="header"]
.Keywords for setting which analyses to be preformed and which files to print. **These are all booleans!** **Defaults are all false so these parameters must be set to true to perform analyses and print to file. 
|===
|Input type
|Description

|only_check_parameters
|If this is true, the program simply prints all the parameters to a file and does not perform any analyses. This is used for checking if the parameters are set correctly and that the keywords are correct. 

|print_stream_order_raster
|If true, prints a raster of the stream orders. 

|print_junction_index_raster
|If true, prints a raster with the junction indices.

|print_fill_raster
|If true, prints a filled raster

|print DrainageArea_raster
|If true, prints a raster of the draiange area in m^2^.

|print_chi_coordinate_raster
|If true, prints a raster with the chi coordinate (in m). Note that if you want to control the size of the data symbols in a visualisation, you should select the `print_simple_chi_map_to_csv` option. 

|print_simple_chi_map_to_csv
|If true, prints a csv file with latitude, longitude and the chi coordinate. Can be converted to a shapefile or GeoJSON with our python mapping scripts. This options gives more flexibility in visualisation than the raster, since in the raster data points will only render as one pixel.

|print_simple_chi_map_to_csv
|If true, prints a csv file with latitude, longitude and the chi coordinate. Can be converted to a shapefile or GeoJSON with our python mapping scripts. This options gives more flexibility in visualisation than the raster, since in the raster data points will only render as one pixel.

|print_segmented_M_chi_map_to_csv
|If true, prints a csv file with latitude, longitude and a host of chi information including the chi slope, chi intercept, drainage area, chi coordinate and other features of the drainage network. The stem:[M_{\chi}] values are calculated with the segmentation algorithm of http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/abstract[Mudd et al. 2014].

|print_basic_M_chi_map_to_csv
|If true, prints a csv file with latitude, longitude and a host of chi information including the chi slope, chi intercept, drainage area, chi coordinate and other features of the drainage network. The stem:[M_{\chi}] values are calculated with a rudimentary smoothing window that has a size determined by the parameter `basic_Mchi_regression_nodes`.

|===

==== Example parameter file

Below is an exaple parameter file. This file is included in the repository along with the driver functions. 
[source,paramfile]
----
# Parameters for performing chi analysis
# Comments are preceeded by the hash symbol
# Documentation can be found here: 
# http://lsdtopotools.github.io/LSDTT_book/#_chi_analysis_part_3_getting_chi_gradients_for_the_entire_landscape

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doens't exist. 
read path: /LSDTopoTools/Topographic_projects/Test_data
write path: /LSDTopoTools/Topographic_projects/Test_data
read fname: Mandakini
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Parameters for selecting channels and basins

threshold_contributing_pixels: 200000
minimum_basin_size_pixels: 50000
test_drainage_boundaries: false

# Parameters for chi analysis
A_0: 1000
m_over_n: 0.45
threshold_pixels_for_chi: 20000

n_iterations: 20
target_nodes: 80
minimum_segment_length: 10
sigma: 10.0
skip: 2

# The data that you want printed to file
only_check_parameters: true
print_stream_order_raster: false
print_DrainageArea_raster: false
print_segmented_M_chi_map_to_csv: true
----

==== Output data formats

Data is written to either rasters or csv files. The rasters are all in `bil` format, which you can read about in the section: <<What data does LSDTopoToolbox take?>>

The **csv** files are comma seperated value files which can be read by spreadsheets and GIS software. 
These files all have labeled columns so their contents can be easily views. 
All of the files contain **latitude** and **longitude** columns. These columns are projected into the **WGS84** coordinate system for ease of plotting in GIS software. 

===== Viewing data and converting to GIS ready formats

If the user has opted to print data in `csv` format, they can use our visualisation tools to convert the data into GIS-ready formats. 

Users should first clone the https://github.com/LSDtopotools/LSDMappingTools[mapping tools respoitory]:

[source,console]
----
$ git clone https://github.com/LSDtopotools/LSDMappingTools.git
----

In this repository the user needs to get a helping script called `LSDOSystemTools.py`. You can fetch this script using the `wget` tool:

[source,console]
----
$ wget https://github.com/LSDtopotools/LSDAutomation/raw/master/LSDOSystemTools.py
----

The user can then run the script `TestMappingToolsPoint.py`, activating the `TestMappingToolsLassoCSV` function:

[source,python]
----
if __name__ == "__main__":
    TestMappingToolsLassoCSV()
----

and changing the target directory to the directory storing the csv files:

[source,python]
----
def TestMappingToolsLassoCSV(): 
    DataDirectory = "C://VagrantBoxes//LSDTopoTools//Topographic_projects//Test_data//"
    LSDP.ConvertAllCSVToGeoJSON(DataDirectory)
----
Note that this is if your run the python script within windows. If you run it within your agrant Linux machine the directory would be:

[source,python]
----
def TestMappingToolsLassoCSV(): 
    DataDirectory = "/LSDTopoTools/Topographic_projects/Test_data/"
    LSDP.ConvertAllCSVToGeoJSON(DataDirectory)
----


You can convert all `csv` files into either shapefiles or GeoJSON files. 

[source,python]
----
    LSDP.ConvertAllCSVToGeoJSON(DataDirectory)
    LSDP.ConvertAllCSVToShapefile(DataDirectory)
----

These files can then be read by your favourite GIS. 