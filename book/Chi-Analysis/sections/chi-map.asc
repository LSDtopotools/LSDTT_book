=== Chi analysis part 3: Getting chi gradients for the entire landscape

The algorithms in the previous two sections were designed for users to statistically determine the *m/n* ratio of a given landscape. 
The routines calculate the gradient in chi space (which we call stem:$M_{/chi}$) but they focus on the main stem
(which in our code is calculated with the longest channel) and its biggest tributaries. 

In many applications, however, users may with to map the chi gradient across a landscape. We provide a tool for doing so in the driver function 'map_chi_gradient.cpp'. 

==== Compile the code

The chi gradient mapping tool can be compiled by navigating to the driver function folder and running 'make':

[source,console]
-----
$ make -f map_chi_gradient.make
-----

==== Run the map chi gradient tool

The program is now ready to run with the correct inputs. The function takes two inputs

1. The path to the parameter file.
2. The name of the parameter file.

So if the parameter file is located at '/home/test_data/some_data/' and it is called 'test_chi_map.param', you run the program with:

[source,console]
-----
$ ./map_chi_gradient.exe /home/test_data/some_data/ test_chi_map.param 
-----

===== The parameter file

The parameter file has keywords followed by a value. The keywords need to be in the correct order. An example file is:

[source,paramfile]
----
DATADIR /home/data/FR/fr_data/
OUTPUTDIR /home/data/FR/ChiGradientMap_with_1_basins/

DEMFILE fr_5m
CHEADSFILE fr_CH_dreich_nodeindices_for_Arc
DEM_ext flt
BasinOrder 2
MinSlope 0.0001
A_0 1000
m_ov_n 0.30
number_of_mc_iterations 500
TargetNodes 80
MinSegLength 10
Sigma 10.0
Skip 0
----

Below is a table with the values for this parameter file:

[cols="1,3,4", options="header"]
.Cheat sheet for map chi gradient parameter file
|===
|Keyword
|Description
|Notes

|DATADIR
|The directory where the data is stored.
|Make sure there as a `/` character at the end. 

|OUTPUTDIR
|Where the output is written.
|Make sure there as a `/` character at the end. IMPORTANT: the code does not check if this directory exists so you need to make sure it does exist before you run the program or it will crash. 

|DEMFILE
|The prefix of the DEM (without the file extension)
|For example, if your DEM is called my_topography.bil then the prefix is my_topography.

|CHEADSFILE
|A channel heads file that has been generated by a channel head algorithm (e.g., http://onlinelibrary.wiley.com/doi/10.1002/2013WR015167/full[Clubb et al., 2014]); this file will be in csv form from the channel heads program. 
|If `NULL` is selected, then the channel network will be built based on a flow accumulation threshold of 50 pixels. 

|DEM_ext
|The DEM extension
|Should be either `bil`, `flt` or `asc`.

|BasinOrder
|The lowest order basin to select channels. 2 is recommended. 
|For example, if this is 2 then all 2nd order channels will be mapped. If it is 3 all 3rd order channels will be mapped. 

|MinSlope
|Minimum slope for the fill algorithm. 
|0.0001 is the standard value. 

|A_0
|Reference drainage area for chi analysis. 
|1000 stem:$m^2$ is recommended. 

|m_ov_n
|The `m/n` ratio.
|If this not has been calculated, users should use 0.5. 

|number_of_mc_iterations
|Number of Monte Carlo iterations for the statistical selection of channel segments. 
|500 is the typical value but this number could be lower on slower systems. 

|TargetNodes
|Maximum number of nodes to be analyzed for any sequence of segments. 
|Users should choose a value between 80-120. Lower numbers are more computationally efficient. 

|MinSegLength
|The minimum length of a distinct segment. 
|Users should select values between 8-15 (10 is probably best). 

|Sigma
|The uncertainty in elevation data in metres.
|This could be the DEM uncertainty, but also contains the topographic roughness elements (e.g., boulders in the channel). In mountain channels 5-10m is a good choice. 

|Skip
|The skip the the number of nodes, on average, skipped in the Monte Carlo routine between adjacent nodes.
|This should be between 0-3. 

|===