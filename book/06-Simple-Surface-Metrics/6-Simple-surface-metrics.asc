:numbered:

== Simple surface metrics (slope, curvature, aspect, etc)

By now you should have compiled the program `LSDTT_analysis_from_paramfile.out`.
If you haven't done this, go to the previous chapter: <<First Analysis>>.

.If you have jumped directly to here
************************************************
. You need to have a compiler, the make utility, and the GDAL utilities available.
If you don't know what these are go to the previous chapters.
. You need to get and compile the source code; see here: <<Get and compile your first LSDTopoTools program>>.
. If you have not used our https://github.com/LSDtopotools/LSDTT_vagrantfiles[vagrantfiles], you should make a folder for your data; see here: <<Preparing your data and folders>>.
. If you don't have data, get the example data; see here: <<The example data>>. These data are downloaded automatically by our https://github.com/LSDtopotools/LSDTT_vagrantfiles[vagrantfiles].
. Move the parameter file to the data folder; see here: <<Placing the paramfile>>.
. Rename your parameter file (so you don't confuse this with other analyses). You can do this
using the ``cp`` command:
+
[source,console]
----
$ cp Example.LSDTT_driver A_sensible_name.LSDTT_driver
----
+
NOTE: the extension to the parameter file (in this case `.LSDTT_driver`) **doesn't matter**. You could
call the file `Wacky.Monkey_Gumballs` if you wanted.
It is the _format_ of this file that is important, not the filename.
+
. Open two terminal windows (Instructions here: <<The terminal and powershells>>).
If you are using the Vagrant version of our software this means having two connections to the Ubuntu server. For example, in windows you would run `vagrant up` once, and then connect to the client using `putty.exe` twice. In other operating sytems just use the local ssh utilities (https://mediatemple.net/community/products/dv/204405144/using-ssh-in-terminal.app-(mac-os-x)[OS X], https://support.suso.com/supki/SSH_Tutorial_for_Linux[linux]) to connect to the vagrant box twice. The vagrant box, which runs Ubuntu, is almost always on `host 127.0.0.1` and `port 2222`. 
See the section on <<Installing LSDTopoTools using VirtualBox and Vagrant>> for details.
************************************************

=== Modifying the parameter file

. You should be starting with a parameter file in your data folder that has been copied from
somewhere else. You will now need to modify this file.

. Open the file in your favorite text editor. There are lots of good ones but http://brackets.io/[Brackets] gives a consistent environment across operating systems and is free. https://atom.io/[Atom] is also nice. The parameter file that gets downloaded with the `AnalysisDriver` package looks like this:
+
[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /home/smudd/SMMDataStore/Topographic_Data/NextMap_old/Scotland
read fname: WhiteadderDEM

# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200

# The different analyses to be run
write fill: true
write hillshade: true
write channel_net: true
----
+
. If a line has a `#` symbol, that line is a comment and the program `LSDTT_analysis_from_paramfile.out`
will ignore it. For example in the above file the if you changes the last line to: `# write channel_net: true`, then that line will be ignored and the `write channel_net` parameter will be set to the default, which happens to be `false`. 
+
. I tend to move the parameter files with the data. Because vagrant syncs your file systems between your client and host machines, you can move the file in your host operating system (that is, your normal computer) and your client computer (that is, the Linux virtual machine that is running inside your) host machine and the changes will take affect in both systems. In our vagrant setup, you can move the example file into the folder `LSDTopoTools/Topographic_projects/Test_data`, which is where our test datasets are located. 
. We then need to deal with the file format and location.
The file information in this case is:
+
[source,paramfile]
----
# File information
dem read extension: bil
dem write extension: bil
read path: /home/smudd/SMMDataStore/Topographic_Data/NextMap_old/Scotland
read fname: WhiteadderDEM
----
+
To change this so it works with the test data you need:
+
[source,paramfile]
----
read path: /LSDTopoTools/Topographic_projects/Test_data
read fname: WA
----
+
and you should change the write fname by adding the line:
+
[source,paramfile]
----
write fname: WA
----
+
IMPORTANT: If you do not designate the `write fname` then the names of your output files will mirror the name of your parameter file. 
+
If you are not using our vagrant system, you can figure out what the path is by typing `pwd` in the terminal window when you are in your data folder.
+
If you are not using the example data, you will need to change the read fname to the name of your data.
So for example, if you are starting with a DEM called `Sierra.bil`,
the read fname will be `Sierra`.
+
.Some notes about parameter files
*************************************
* The parameter names are **NOT** case sensitive: `dem read extension` is the same as `DEM rEaD extenSION` as far as the program is concerned.
* The parameter values **ARE** case sensitive: `bil` is **NOT** the same as `BIL`.
* The program will only understand the parameter name if you get it exactly correct.
So if you misspell or put an underscore where a space should
be, the program will not be able to understand.
So be careful when editing these files!!
*************************************
+
. Now lets move on to parameter values. At the moment these are:
+
[source,paramfile]
----
# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
pixel_threshold_for_channel_net: 200
----
+
The first line above are comments, and are ignored by the program.
We don't actually need the `min_slope_for_fill` parameter for this run,
but if you leave that it it won't affect the program. The `pixel_threshold_for_channel_net` is for channel extraction. It won't do anything in this example, since we are not doing channel extraction. 
+
. To get our simple surface metrics, we are going to use a polyfit function. This fits a polynomial to the topographic surface
over a fixed window, and then calculates topographic metrics of this polynomial rather than calculating metrics on the data
itself. This technique is employed to smooth high frequency noise, such as that from pits and mounds caused by falling trees.
+
For LiDAR data, we have found that you want a polyfit window that is around 7 metres in radius.
This is based on work by http://pages.uoregon.edu/~jroering/outgoing/2010RoeringTreesSoilEPSL2010.pdf[Roering et al., 2010] and
http://www.geos.ed.ac.uk/homes/smudd/Hurst_JGR2012.pdf[Hurst et al., 2012].
For coarser data, you probably want to smooth over at least 1 pixel radius, so if you have a 10m DEM your window radius should be >10m.
+
In this example we are using old NextMap data (it was processed around 2007). Sadly this data isn't so great: it is full of lumps.
The data resolution is 5 metres, but we are going to use a polyfit radius of 15.1 metres to make sure we get three pixels on each side of the centre pixel.
+
The keyword is `polyfit_window_radius`, so in your parameter file you should have these lines (I tured the `pixel_threshold_for_channel_net` into a comment since it doens't do anything:
+
[source,paramfile]
----
# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200
polyfit_window_radius: 15.1
----
+
. We also want to add some lines to the parameter file to designate a method for calculating slope. The default method is called `d8`.
It takes the slope between a pixel and its steepest downslope neighbor.
For this example, we want the `polyfit` method, wherein the data is fit with a polynomial and the slope is determined by differentiating this polynomial.
To switch the slope method to `polyfit`, you use the flag for `slope_method`:
+
[source,paramfile]
----
# Methods used in analyses
slope_method: polyfit
----
+
The first line above (`# Methods used in analyses`) is a comment so ignored by the program, but it is useful to add these
comments to the parameter files so that other people can tell what you are doing.
+
. Now you should tell the program what rasters to write. In this case we want curvature, aspect, and slope,
so this section of the parameter file should look like:
+
[source,paramfile]
----
# The different analyses to be run
write slope: true
write curvature: true
write aspect: true
----
+
. Okay, save your changes to the parameter file;
we will now move on to performing the analyses. It should look like this:
+
[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /LSDTopoTools/Topographic_projects/Test_data
read fname: WA
write fname: Whiteadder

# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200
slope_method: polyfit
polyfit_window_radius: 15.1

# The different analyses to be run
write slope: true
write aspect: true
write curvature: true
----

=== Running the analyses (in this case, writing fill and hillshade rasters)

. You will now need to run the program `LSDTT_analysis_from_paramfile.out`.
Some details about running this program are in the first tutorial (<<First Analysis>>) in case you have forgotten.

. I renamed my parameter file `Whiteadder_Surf.LSDTT_driver, so to run the code you need to type the following into the command line::
+
[source,console]
----
$ ./LSDTT_analysis_from_paramfile.out /LSDTopoTools/Topographic_projects/Test_data Whiteadder_Surf.LSDTT_driver
----
+
. The program will spit out text to screen as it works.
Once it is finished, you can look at the data in your favorite GIS.
You can check to see if all the files are there by going into your data folder and typing `ls`.
You should see something like:
+
[source,console]
----
$ ls
gabilan.bil          New_driver.LSDTT_driver  Whiteadder_aspect.bil
gabilan.hdr          WA.bil                   Whiteadder_aspect.hdr
Mandakini.bil        WA_fill.bil              Whiteadder_curvature.bil
Mandakini.hdr        WA_fill.hdr              Whiteadder_curvature.hdr
New_driver_fill.bil  WA.hdr                   Whiteadder.LSDTT_driver
New_driver_fill.hdr  WA_hs.bil                Whiteadder_slope.bil
New_driver_hs.bil    WA_hs.bil.aux.xml        Whiteadder_slope.hdr
New_driver_hs.hdr    WA_hs.hdr

----
+
. One thing to note: If you use `ArcMap` to calculate curvature, it will get the sign wrong! Ridgetops have negative curvature
and valleys have positive curvature. This is reversed in `ArcMap`. Our software gives the correct curvature.


=== Summary

You should now be able to extract some simple topographic metrics from a DEM using our Driver_analysis program.
