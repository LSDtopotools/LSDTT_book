=== Running your first analysis

We are going to run the first example on some example data.

==== First analysis: example data

Navigate into your data folder and download the data using the http://www.gnu.org/software/wget/[wget] tool

[source,console]
----
$ wget http://www.geos.ed.ac.uk/~smudd/export_data/WhiteadderDEM.tif
----

This data is in `.tif` format! Quite a lot of the data you might download from the web is in this format.
LSDTopoTools doens't read `tif` files (that is a job for the future), so *you need to convert to a valid file format*.
We will convert the data using GDAL: see the section <<translating-your-raster-into-something-that-can-be-used-by-lsdtopotoolbox>>.

To convert the data to ENVI `bil` format (which is our preferred format) type:

[source,console]
----
$ gdal_translate -of ENVI WhiteadderDEM.tif WhiteadderDEM.bil
----

Now, see if the file is there::

[source,console]
----
$ ls
WhiteadderDEM.bil          WhiteadderDEM.hdr
WhiteadderDEM.bil.aux.xml  WhiteadderDEM.tif
----

If you looked at the file in a GIS you might have additional files with the extension `.aux.xml`.
The importnat thing is that you now have files with the extensions `bil` and `hdr`.

Important: There are two formats that use the file extension `bil`: the *ENVI* format (which is the one we use)
and an *ESRI* format. Make sure your `bil` files are in *ENVI* format.
You can always check using `gdalinfo`.

==== Placing the paramfile

The code is flexible enough that the parameter file can be in a different
location from the data, but I think it is good practice to keep the parameter
files with the data. The parameter file not only runs the software, but
*more importantly it is a reproducible record of your analyses!* So if you are
doing research you should save these files. The software is designed so that
if you send someone else the parameter file and the DEM they can reproduce
your analysis exactly. This differentiates our software from GUI driven
software like ArcMap and QGIS.

Okay, lets actually move the file. An example file came with the source code.
You can use the cp` command to make a copy of this file in your data folder.

Note:Your directories will have different names than those shown here so
modify the paths shown below appropriately:

[source,console]
----
$ cp /home/LSDTT_repositories/LSDTopoTools_AnalysisDriver/Analysis_driver/Example.LSDTT_driver Example.LSDTT_driver
----

You can check to see if the file is there:

[source,console]
----
$ ls
Example.LSDTT_driver  WhiteadderDEM.bil.aux.xml  WhiteadderDEM.tif
WhiteadderDEM.bil     WhiteadderDEM.hdr
----

We will use `Example.LSDTT_driver` as a template, but will want to change some of the values in that file.
You might want to keep the original, so we suggest making a copy of the parameter file:

[source,console]
----
cp Example.LSDTT_driver Whiteadder.LSDTT_driver
----

==== Modifying the parameter file

Before you run the program you need to modify the parameter file.
The parameter file is just plain text, so you will need a text editor to modify it.
You can modify it in your favorite text editor, but *don't* use a program that
inserts a bunch of stupid formatting like Wordpad or Word.

In fact most text editors in Windows systems have the unfortunate habit of
inserting diabolical hidden characters, called http://en.wikipedia.org/wiki/Control_character[control characters]
that you will never see or notice if you just look at text but will completely
screw up the program. We have endeavored to remove these characters
within our code, but I highly recommend editing the parameter file either
in linux, or using a text editor on Windows that won't insert these characters.

For windows, we use http://www.pspad.com/[Pspad] or https://atom.io/[Atom]

For linux, we use either http://en.wikipedia.org/wiki/Emacs[emacs] or http://en.wikipedia.org/wiki/Vim_(text_editor)[vim]

These linux text editors take a bit of getting used to, so unless you are going to start
writing code, you should probably stick with *Pspad* or *Atom*.

In many text editors, you can select the text formatting. It turns out there are different formattings for different operating systems.
You should use the magic of the internet to determine how to change the text formatting.
Many editors have the options *MAC*, *DOS*, and *UNIX* formatting. You want *UNIX* formatting.

. Okay, lets get started modifying this file. Open it in your text editor. It will look a little bit like this::
+
[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /home/smudd/SMMDataStore/Topographic_Data/NextMap_old/Scotland
read fname: WhiteadderDEM

# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200

# The different analyses to be run
write fill: true
write hillshade: true
# write channel_net: true
----
+
. These files have a specific format. Any line that starts with the `#` symbol is ignored: you can put comments here.

. Lines with parameters are separated with a colon (`:`). The text before the colon is the parameter, and the text
after the colon is the parameter value.
For example, in the above file, `dem read extension` is the parameter and `bil` is the parameter value.
+
* The parameter names are **NOT** case sensitive: `dem read extension` is the same as `DEM rEaD extenSION` as far as the program is concerned.
* The parameter values **ARE** case sensitive: `bil` is **NOT** the same as `BIL`.
* The program will only understand the parameter name if you get it exactly correct. So if you misspell or put an underscore where a space should
be, the program will not be able to understand. So be careful when editing these files!!
+
. Okay, first, we want to make sure the file path and the file names are correct. These two lines::
+
[source,paramfile]
----
dem read extension: bil
dem write extension: bil
----
+
tell the program that you want to read and write *ENVI* files. That is our intention, so we will leave these lines alone. The default is `bil` so you could
actually delete these two lines and the program would still work.
+
. Next are lines for the `read path` and the `read fname`.
If you didn't have lines for these it would default to the
path of the parameter file and the name of the parameter file,
excluding everything after the `.`.
However I would recommend assigning these.
To figure out what the path to your data is,
first make sure the data is there using `ls` and then type `pwd` to get the path:
+
[source,paramfile]
----
$ pwd
/home/smudd/topographic_tools/topographic_data/NextMap/Scotland
----
+
. The `read fname` is the name of the DEM *WITHOUT the extension*.
So if the DEM is called `WhiteadderDEM.bil` then the `read fname` would be `WhiteadderDEM`.
These names are *CASE SENSITIVE*.
+
You should modify your parameter file with the correct directory:
+
[source,paramfile]
----
# This is a driver file for LSDTopoTools
# Any lines with the # symbol in the first row will be ignored

# File information
dem read extension: bil
dem write extension: bil
read path: /home/smudd/topographic_tools/topographic_data/NextMap/Scotland
read fname: WhiteadderDEM

# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200

# The different analyses to be run
write fill: true
write hillshade: true
# write channel_net: true
----
+
IMPORTANT: *Do not just copy the above file: your directory will be different!*
+
. You can also change the path and name of the files you write.
The keywords are `write path` and `write fname`. For example:
+
[source,parafile]
----
write path: /home/smudd/a_different/directory
write fname: DifferentDEMname
----
+
If you leave these blank then the output will just write to the read directory. For now don't add write path information.
+
. Further down there are some parameters:
+
[source,paramfile]
----
# Parameters for various topographic analysis
min_slope_for_fill: 0.0001
# pixel_threshold_for_channel_net: 200
----
+
The first one `min_slope_for_fill` sets a minimum topographic slope after the `fill` function.
The fill function makes sure there are no internally drained basins in the DEM,
and is a standard task in topographic analysis.
+
IMPORTANT: The parameter name has underscores: don't replace these with spaces or the program won't understand!
+
The parameter is actually a bit redundant
since the default for this parameter is 0.0001, so deleting this line wouldn't change the output. However, the line is left
in if you want to change it.
+
The next line has a `#` symbol in front so is ignored by the program.
+
. The next bit tells the program what you want to do with the DEM.:
+
[source,paramfile]
----
# The different analyses to be run
write fill: true
write hillshade: true
# write channel_net: true
----
+
In this case these instructions are telling the program to write the fill DEM and the hillshade DEM.
The program will not write a channel network (`write channel_net`) since this line has a `#` as its first character.
+
You might be asking: doesn't ArcMap and QGIS have fill and hillshade functions?
They do indeed, but for large rasters our code is much faster,
and using our parameter files you can create reproducible analyses that can easily be
sent to collaborators, students, clients, etc.
+
These functions will only run if the parameter value is `true`.
+
. Okay, save your changes to the parameter file; we will now move on to performing the analyses.
