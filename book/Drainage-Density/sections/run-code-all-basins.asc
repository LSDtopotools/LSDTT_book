=== Analysing drainage density for all basins

This section provides instructions for how to extract the drainage density and mean hilltop curvature for every basin in the landscape of a given order (e.g. all second order drainage basins).

==== Creating the paramter file

In order to run the drainage density analysis code you must first create a parameter file for your DEM.  This should be placed in the same folder as your DEM and the channel heads `bil` file.  If you followed the instructions in the <<Get the code for drainage density analysis>> section then you will already have an example parameter file for the Guadalupe Mountains DEM called `drainage_density_guadalupe.driver`.  Parameter files should have the following structure:


[source,paramfile]
----
Name of the DEM without extension
Name of the channel heads file - will vary depending on your channel extraction method
Minimum slope for filling the DEM
Order of basins to extract
Window size (m): calculate for your DEM resolution
----

An example parameter file for the Guadalupe Mountains DEM is set out below:

[source,paramfile]
----
Guadalupe_DEM
Guadalupe_DEM_CH_DrEICH
0.0001
2
6
----

==== Step 1: Get the junctions of all the basins

The first step of the analysis creates a text file with all the junction numbers of the basins of the specified stream order.  Before the code can be run, you must compile it using the makefile in the folder `LSDTopoTools_DrainageDensity/driver_functions_DrainageDensity`.  Navigate to the folder using the command:

[source,console]
----
$ cd driver_functions_DrainageDensity/
----

and compile the code with:

[source,console]
----
$ make -f drainage_density_step1_junctions.make
----

This may come up with some warnings, but should create the file `drainage_density_step1_junctions.out`. You can then run the program with:

[source,console]
----
$ ./drainage_density_step1_junctions.out /path/to/DEM/location/ name_of_parameter_file.driver
----

For our example, the command would be:

[source,console]
----
$ ./drainage_density_step1_junctions.out /LSDTopoTools/Topographic_projects/Guadalupe_NM/ drainage_density_guadalupe.driver
----

The program will create a text file called `DEM_name_DD_junctions.txt` which will be ingested by step 2 of the analysis.  It will also create some new rasters:

* DEM_name_fill: the filled DEM
* DEM_name_HS: a hillshade of the DEM
* DEM_name_SO: the channel network
* DEM_name_JI: the locations of all the tributary junctions
* DEM_name_CHT: the curvature for all the hilltops in the DEM

==== Step 2: Get the drainage density of each basin

The second step of the analysis ingests the junctions text file created in step 1. For each junction it will extract the upstream drainage basin, and calculate the drainage density and mean hilltop curvature for the basin.  This will be written to a text file which can be plotted up using our Python script.

First, compile the code with the makefile:

[source,console]
----
$ make -f drainage_density_step2_basins.make
----

This may come up with some warnings, but should create the file `drainage_density_step2_basins.out`. You can then run the program with: 

[source,console]
----
$ ./drainage_density_step2_basins.out /path/to/DEM/location/ name_of_parameter_file.driver
----

For our example, the command would be:

[source,console]
----
$ ./drainage_density_step2_basins.out /LSDTopoTools/Topographic_projects/Guadalupe_NM/ drainage_density_guadalupe.driver
----

This program will create 2 text files.  The first one will be called `DEM_name_drainage_density_cloud.txt` and will have 3 rows:

. Drainage density of the basin
. Mean hilltop curvature of the basin
. Drainage area of the basin

This text file represents the data for every basin in the DEM.  The second text file will be called `DEM_name_drainage_density_binned.txt`, where the drainage density and hilltop curvature data has been binned with a bin width of 0.005 m^-1^.  It has 6 rows:

. Mean hilltop curvature for the bin
. Standard deviation of curvature
. Standard error of curvature
. Drainage density for the bin
. Standard deviation of drainage density
. Standard error of drainage density

These text files are read by `drainage_density_plot.py` to create plots of the drainage density and mean hilltop curvature.  The code also produces `DEM_name_basins.bil`, which is a raster with all the basins analysed.

==== Step 3: Plotting the data

Navigate to the folder `Python_scripts` within the `LSDTopoTools_DrainageDensity` repository.  You should find the following files:

[source,console]
----
vagrant@vagrant-ubuntu-precise-32:/LSDTopoTools/Git_projects/LSDTopoTools_DrainageDensity/Python_scripts$ ls
drainage_density_plot.py	drainage_density_plot_cosmo.py
----

Open the file called `drainage_density_plot_cosmo.py`.  We suggest doing this on your host machine rather than the virtual machine: for instructions about how to install Python on your host machine please see the section on <<Getting python running>>. 

Open the file called `drainage_density_plot.py`.  We suggest doing this on your host machine rather than the virtual machine: for instructions about how to install Python on your host machine please see the section on <<Getting python running>>.  

If you want to run the script on the example dataset you can just run it without changing anything. The script will create the file `Guadalupe_DEM_drainage_density_all_basins.png` in the same folder as your DEM is stored in.  If you want to run it on your own data, simply open the Python script in your favourite text editor.  At the bottom of the file you need to change the DataDirectory (Line 165) and the DEM identifier (Line 167) to reflect your data:

[source,python]
----
# Set the data directory here - this should point to the folder with your DEM
DataDirectory = 'C:\\vagrantboxes\\LSDTopoTools\\Topographic_projects\\Guadalupe_NM\\'
# Name of the DEM WITHOUT FILE EXTENSION
DEM_name = 'Guadalupe_DEM'
make_plots(DataDirectory, DEM_name) 
----

You should end up with a plot like the one below:

.Plot of drainage density against mean hilltop curvature for the Guadalupe Mountains example dataset
image::images/Guadalupe_DEM_drainage_density_all_basins.png[Plot of drainage density against mean hilltop curvature, 600,400]

==== Summary

You should now be able to extract the drainage density and mean hilltop curvature for all basins of a given order for your DEM, and use Python to plot the results.