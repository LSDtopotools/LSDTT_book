=== Windows installation programs

Take a deep breath. I am afraid this is going to take a while.
It can be done, but you may need psychological treatment before the end.
You might consider following our instructions for <<Installing LSDTopoTools using VirtualBox and Vagrant>> instead of trying to get the software installed within a Windows environment.

==== Package management

If you are a windows user, you are probably used to installing software on windows the traditional way using installation files.
The tools we are using involve many linked programs, and installing them by downloading windows installers from their respective websites can be tiresome.
An alternative is to use something called a https://en.wikipedia.org/wiki/Package_manager[machine package manager], which makes installing software a bit less of a hassle.

===== Chocolatey package manager

Here we will use a machine package manager built specifically for windows called https://chocolatey.org/[chocolatey].

To install *chocolatey*, type in the following in your **administrative** powershell:

  PS> iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))

You then just have to sit back and wait while it installs.

NOTE: To test if chocolatey is working after the installation, type `choco -v`. If you get an error saying it is not a recognized name of a cmdlet or path, then simply close your powershell windows and open new ones.

Once you have chocolatey installed, you can get the additional packages that are required for the tools we use in this book by using the `choco` command.

==== Git

You can install git by downloading the installation package from the https://desktop.github.com/[Github desktop] website.
Alternatively, you can use chocolatey:

[source,consol]
----
PS> choco install git
----

You can check if it works in the command line by calling

[source,consol]
----
PS> git --version
----

If you install git desktop, you will get a https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Powershell[git powershell] link on your desktop.
This powershell is quite useful when using git since it does things like highlights files in different colours depending on status
(e.g., if they have been modified or not or of they are being tracked).


=== Tools for pass:[C++]

There are several options for installing pass:[C++] and fortran compilers on your Windows machine.
Two popular options, http://www.mingw.org/[Mingw] and https://www.cygwin.com/Cygwin] install something that behaves a bit like a Linux operating system
(<<Turning your windows machine into a Linux machine,but perhaps it is easier just to set up Linux within your Windows computer?>>).

Another option for pass:[C++] is to install the developer toolkit from Microsoft, https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx[Visual Studio express].
You can install the 2013 version using chocolatey:

[source,consol]
----
PS> choco install visualstudioexpress2013windowsdesktop
----

You can also install the software by downloading from the https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx[Visual Studio website].

==== Cygwin

To install https://www.cygwin.com/[Cygwin], you must first install the program
https://www.cygwin.com/setup-x86.exe[setup-x86.exe] for a 32 bit system or
https://www.cygwin.com/setup-x86_64.exe[setup-x86_64] for a 64 bit system.

When you run `setup-*.exe`, you will get a window that looks like this:

.Cygwin setup.
image::images/cygwin_setup.jpg[Cygwin setup window]

Scroll down the the `devel` menu and select the following packages:

  binutuls
  gcc core
  g++
  gfortran
  gdb
  make

You can also install all sorts of other things from cygwin like *Ruby*, *Git* and *Python*, but you don't need to do that if you've already installed them.
In fact, you might want to make sure *git* is not selected if you have installed the Git powershell from the github desktop application.

Once you have selected the things you need, select *next*.
You might need to install a bunch of additional packages because your selected packages depend on them.
If this is your first time installing cygwin go and get a drink or have lunch since installation will take some time.


==== pass:[C++] libraries

Some of our more specialized components require libraries. 
These are very difficult to install on Windows, and you will possibly self harm if you attempt to do so.
Why don't you <<Turning your windows machine into a Linux machine,make a virtual Linux machine instead>>?

=== Python

Python in Windows can be a little bit more difficult to manage than python in Linux.
You can get python through chocolatey, but it makes installing extra packages a bit of a pain.

Instead, you probably want to install python as part of a package that includes all the handy python libraries and associated programs.

The popular ones are:

. http://python-xy.github.io/[Python(x,y)] contains all manner of useful packages for scientists.
I have found, however, that updating this is not so straightforward;
if you have a look at the http://python-xy.github.io/downloads.html[Python(x,y) downlaods page] you will see that the updates have dependencies that dead end,
so if you are on, say, Python(x,y) 2.6.X you will need to reinstall Python(x,y) 2.7.X if you want continued updates.
Python(x,y) is also huge: it includes *many* python packages, most of which you will never use.
. http://winpython.sourceforge.net/[Winpython] is another python package that has a nice updating interface.
. https://store.continuum.io/cshop/anaconda/[Anaconda] is another scientific package that includes all sorts of smaller packages.
It seems to be able to handle updates better than Python(x,y) through its `conda` updating interface.
. http://conda.pydata.org/miniconda.html[miniconda] uses the same `conda` updating interface as `anaconda`, the difference is that with `miniconda` things arene't installed automatically,
so you will have to figure out what you want and then use `conda` to install new packages (e.g., pandas, scipy, gdal, etc.)


=== GDAL windows installation

You can download GDAL for windows from this website: https://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries.
If you are on Windows, however, you might want to just use the GDAL bindings in python. 
Or, you can skip all of this and build a virtual linux machine on your windows computer. 


=== Ruby

You can check to see if Ruby is installed on your system by typing

[source,consol]
----
PS> ruby -v
----

and you can check the Rubygems version with

[source,consol]
----
PS> gem -v
----

==== Install Ruby (version 1)

. Download and install Ruby: https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller. We have used version 2.2.
. Download and install Ruby Gems: https://rubygems.org/pages/download. To install this, you need to download it and then open a powershell window, navigate to the folder with gems in it, and run:
+
[source,console]
----
PS> \folder\with\rubygems\> ruby setup.rb
----
+
. Download the Ruby devtools: http://rubyinstaller.org/downloads/. You need to unzip this and run two things:
+
----
PS> \folder\with\DevKit\> ruby dk.rb init
PS> \folder\with\DevKit\> ruby dk.rb install
----
+
. Now install bundler. In a powershell, you can, from anywhere, type `gem install bundler`. 

==== Install Ruby using choco

If these are not installed, install them using <<Chocolatey package manager,chocolatey>>
(in an <<Starting a powershell session,administrator powershell>>).
While you are at it, install the RubyDev and Node.js package:

[source,consol]
----
PS> choco install ruby
PS> choco install rubygems
PS> choco install ruby2.devkit
PS> choco install node.js
----

==== Fix rubygems on Windows

At the time of this writing, rubygems is "broken" on Windows:
if you try to install a gem file you will get an error that says you cannot make an SSL connection.
You will need to fix this problem by https://gist.github.com/luislavena/f064211759ee0f806c88[copying a trust certificate into you rubygems folder].

. First download the file https://raw.githubusercontent.com/rubygems/rubygems/master/lib/rubygems/ssl_certs/AddTrustExternalCARoot-2048.pem[AddTrustExternalCARoot-2048.pem].

WARNING: It seems some browsers add formatting to this file when downloaded (Chrome does this, for example).
I only managed to get this fix to work after downloading the file using Internet Explorer.

[start=2]
. Next, find the location of your gems installation:

[source,consol]
----
PS> gem which rubygems
C:/Ruby21/lib/ruby/2.1.0/rubygems.rb
----

. Go to the folder and then go into the SLL_certs subfolder.
In this case it is at: `C:/Ruby21/lib/ruby/2.1.0/rubygems/SSL_certs`.
Copy the `.pem` file into this folder. Rubygems should now work.

==== Fix RubyDevKit on Windows

The devkit sometimes does not work the first time around.
If you get error messages about the devkit, you should go to the devkit folder (you need to find it on your system)
and run:

[source,consol]
----
PS> ruby dk.rb init
----

This will generate a file called `config.yml`. Sometimes, the devkit installer will not find your Ruby installation, so you will need to add the path to your Ruby installation to this file.
For example, if your Ruby instalation is sitting in C:/Ruby21/, then you should modify the `config.yml` file to look like:

.The config.yml file:
[source,paramfile]
----
# This configuration file contains the absolute path locations of all
# installed Rubies to be enhanced to work with the DevKit. This config
# file is generated by the 'ruby dk.rb init' step and may be modified
# before running the 'ruby dk.rb install' step. To include any installed
# Rubies that were not automagically discovered, simply add a line below
# the triple hyphens with the absolute path to the Ruby root directory.
#
# Example:
#
# ---
# - C:/ruby19trunk
# - C:/ruby192dev
#
---
- C:/Ruby21/
----

==== Install some gems

From here we can install some useful ruby gems.
http://asciidoctor.org/[Asciidoctor] is really great for writing documentation.
http://bundler.io/[Bundler] is useful for keeping Ruby packages up to date.

[source,consol]
----
PS> gem install asciidoctor
PS> gem install bundler
----

==== If you use Ruby with Java (you will probably not need this)

This is for users who are trying to get a Ruby extension that uses Java installed. 
If you use an extension that need a java link, you will need the gem

[source,console]
----
PS> gem install rjb -v '1.4.9'
----

But on my system this failed because you need to define the java runtime home. 
To do this, you need to figure out where your java installation is, and then 
define an environemnt variable $JAVA_HOME to point to this directory. 

To do so, you should do this (in an administrator Powershell):

[source,console]
----
PS> [Environment]::SetEnvironmentVariable("JAVA_HOME", "C:\Progra~2\Java\jre_7_55", "Machine")
----

Note that the powershell abbreviates `Program files (x86)` as Progra~2 and `Program Files` as Progra~1. 

You can check to see if the appropriate path has been set with:

[source,console]
----
PS> Get-ChildItem Env:
----

Unfortuately this only works in an administrator window. 

=== Windows installation summary

If you actually managed to install things on Windows without permanent emotional scarring, I offer my sincerest congratulations. 
However, if you are just skipping ahead, why don't you make your life easier and <<Turning your windows machine into a Linux machine,make a virtual Linux machine inside your Windows computer>>?
