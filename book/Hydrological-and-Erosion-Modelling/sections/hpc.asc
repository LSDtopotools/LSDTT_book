=== Running the code in Parallel

I've mentioned that the code has features that allow certain sections to run on parallel computing technology, such as a multi-core desktop PC, or a cluster computer with multiple CPUs. The included makefiles will compile this feature by deafult, and most computers are set up to run in parallel, given appropriate software. However, it is a good idea to double check your computing environment is set up correctly for parallel execution of the code.

On linux, commands such as `nproc` will tell you how many CPUs/cores you have availble. (A decent desktop PC might have 4-8 cores, for example). On linux, you can set the number of execution threads to match the number of cores by doing:

`export OMP_NUM_THREADS=X`

where X is the number of threads (set it to the same number of cores available for best performance.) So for an 8 core machine, set this value to 8. Some environments will already have this set up automatically, but I do it just to be sure my code will use all the availble cores.

=== Notes for HPC use

As it currently stands, CatchmentModel is designed for shared-memory architectures, i.e. single-nodes on cluster machines. Of course, you can take advantage of HPC services, as they usually high-spec compute nodes with decent numbers of CPUs and memory. The code lends itself well to 'embarassingly' parallel task farming, whereby you run multiple instances of the code with different datasets or parameters, for example. An HPC service is very useful for this as you can set potentially hundreds of simulations going at the same time, and get your results back much quicker. Consult your friendly HPC service for details of how to do this, as the instructions will vary between HPC environment.
